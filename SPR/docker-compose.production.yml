version: '3.8'

services:
  # WhatsApp Application
  whatsapp-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: spr-whatsapp-prod
    restart: unless-stopped
    env_file:
      - config/production.env
    environment:
      - NODE_ENV=production
    volumes:
      - whatsapp_sessions:/app/whatsapp_server/sessions
      - whatsapp_media:/app/whatsapp_server/media
      - whatsapp_logs:/app/whatsapp_server/logs
      - whatsapp_qrcodes:/app/whatsapp_server/qrcodes
      - whatsapp_backups:/app/backups
    networks:
      - spr-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: spr-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/letsencrypt:ro
      - nginx_logs:/var/log/nginx
    networks:
      - spr-network
    depends_on:
      - whatsapp-app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: spr-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-spr_redis_2025}
    volumes:
      - redis_data:/data
    networks:
      - spr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL para dados persistentes
  postgres:
    image: postgres:15-alpine
    container_name: spr-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: spr_whatsapp
      POSTGRES_USER: ${POSTGRES_USER:-spr_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-spr_password_2025}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=pt_BR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - spr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-spr_user} -d spr_whatsapp"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot para SSL
  certbot:
    image: certbot/certbot
    container_name: spr-certbot-prod
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./ssl-challenge:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@royalnegociosagricolas.com.br --agree-tos --no-eff-email -d whatsapp.royalnegociosagricolas.com.br
    depends_on:
      - nginx

  # Monitoring com Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: spr-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - spr-network
    profiles:
      - monitoring

  # Grafana para visualização (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: spr-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-spr_grafana_2025}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - spr-network
    profiles:
      - monitoring

volumes:
  whatsapp_sessions:
    driver: local
  whatsapp_media:
    driver: local
  whatsapp_logs:
    driver: local
  whatsapp_qrcodes:
    driver: local
  whatsapp_backups:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  spr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 