#!/usr/bin/env python3
"""
SPR 1.1 - Script de Sincroniza√ß√£o com GitHub via GitHub App
Vers√£o corrigida para autentica√ß√£o JWT e sincroniza√ß√£o autom√°tica
"""

import os
import sys
import json
import time
import shutil
from pathlib import Path
from datetime import datetime, timedelta
import requests
import jwt
from git import Repo
from dotenv import load_dotenv

# Configura√ß√µes
SCRIPT_DIR = Path(__file__).parent
SPR_DIR = SCRIPT_DIR / "SPR"
TEMP_DIR = SCRIPT_DIR / "temp_repo"
CONFIG_FILE = SCRIPT_DIR / "github_pulso_app.json"
PEM_FILE = SCRIPT_DIR / "github_pulso_app.pem"

# Configura√ß√µes do GitHub
GITHUB_API_URL = "https://api.github.com"
OWNER = "royal-Agro"
REPO_NAME = "spr-main"

class GitHubAppAuth:
    """Classe para autentica√ß√£o via GitHub App"""
    
    def __init__(self, app_id, private_key_path, installation_id):
        self.app_id = app_id
        self.private_key_path = private_key_path
        self.installation_id = installation_id
        self.installation_token = None
        self.token_expires_at = None
    
    def _load_private_key(self):
        """Carrega a chave privada do arquivo PEM"""
        try:
            with open(self.private_key_path, 'r') as f:
                return f.read()
        except Exception as e:
            print(f"‚ùå Erro ao carregar chave privada: {e}")
            return None
    
    def _generate_jwt(self):
        """Gera JWT para autentica√ß√£o da GitHub App"""
        private_key = self._load_private_key()
        if not private_key:
            return None
        
        # Payload do JWT
        now = int(time.time())
        payload = {
            'iat': now - 60,  # Issued at (60s no passado para compensar clock skew)
            'exp': now + 600,  # Expira em 10 minutos
            'iss': self.app_id  # Issuer (App ID)
        }
        
        try:
            # Gera o JWT
            token = jwt.encode(payload, private_key, algorithm='RS256')
            return token
        except Exception as e:
            print(f"‚ùå Erro ao gerar JWT: {e}")
            return None
    
    def get_installation_token(self):
        """Obt√©m token de instala√ß√£o da GitHub App"""
        # Verifica se o token ainda √© v√°lido
        if (self.installation_token and self.token_expires_at and 
            datetime.now() < self.token_expires_at - timedelta(minutes=5)):
            return self.installation_token
        
        # Gera novo JWT
        jwt_token = self._generate_jwt()
        if not jwt_token:
            return None
        
        # Solicita token de instala√ß√£o
        headers = {
            'Authorization': f'Bearer {jwt_token}',
            'Accept': 'application/vnd.github.v3+json',
            'User-Agent': 'SPR-Sync-Script/1.1'
        }
        
        url = f"{GITHUB_API_URL}/app/installations/{self.installation_id}/access_tokens"
        
        try:
            response = requests.post(url, headers=headers)
            response.raise_for_status()
            
            data = response.json()
            self.installation_token = data['token']
            
            # Calcula quando o token expira
            expires_at = datetime.fromisoformat(data['expires_at'].replace('Z', '+00:00'))
            self.token_expires_at = expires_at
            
            print(f"‚úÖ Token de instala√ß√£o obtido com sucesso (expira em {expires_at})")
            return self.installation_token
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro ao obter token de instala√ß√£o: {e}")
            if hasattr(e, 'response') and e.response:
                print(f"   Response: {e.response.text}")
            return None

class SPRSyncManager:
    """Gerenciador de sincroniza√ß√£o do SPR"""
    
    def __init__(self):
        self.auth = None
        self.setup_auth()
    
    def setup_auth(self):
        """Configura autentica√ß√£o com GitHub App"""
        try:
            # Carrega configura√ß√µes
            with open(CONFIG_FILE, 'r') as f:
                config = json.load(f)
            
            app_id = config['app_id']
            installation_id = config['installation_id']
            
            # Inicializa autentica√ß√£o
            self.auth = GitHubAppAuth(app_id, PEM_FILE, installation_id)
            print(f"‚úÖ Configura√ß√£o carregada - App ID: {app_id}, Installation ID: {installation_id}")
            
        except Exception as e:
            print(f"‚ùå Erro ao carregar configura√ß√£o: {e}")
            sys.exit(1)
    
    def _make_github_request(self, method, endpoint, **kwargs):
        """Faz requisi√ß√£o autenticada para GitHub API"""
        token = self.auth.get_installation_token()
        if not token:
            raise Exception("N√£o foi poss√≠vel obter token de instala√ß√£o")
        
        headers = kwargs.get('headers', {})
        headers.update({
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json',
            'User-Agent': 'SPR-Sync-Script/1.1'
        })
        kwargs['headers'] = headers
        
        url = f"{GITHUB_API_URL}/{endpoint.lstrip('/')}"
        response = requests.request(method, url, **kwargs)
        
        return response
    
    def check_repository_exists(self):
        """Verifica se o reposit√≥rio existe"""
        print(f"üîç Verificando se reposit√≥rio {OWNER}/{REPO_NAME} existe...")
        
        try:
            response = self._make_github_request('GET', f'repos/{OWNER}/{REPO_NAME}')
            
            if response.status_code == 200:
                print(f"‚úÖ Reposit√≥rio {OWNER}/{REPO_NAME} j√° existe")
                return True
            elif response.status_code == 404:
                print(f"‚ùå Reposit√≥rio {OWNER}/{REPO_NAME} n√£o existe")
                return False
            else:
                print(f"‚ö†Ô∏è  Status inesperado: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar reposit√≥rio: {e}")
            return False
    
    def create_repository(self):
        """Cria o reposit√≥rio no GitHub"""
        print(f"üî® Criando reposit√≥rio {OWNER}/{REPO_NAME}...")
        
        # Primeiro, verifica se √© uma organiza√ß√£o
        try:
            org_response = self._make_github_request('GET', f'orgs/{OWNER}')
            is_org = org_response.status_code == 200
        except:
            is_org = False
        
        # Dados do reposit√≥rio
        repo_data = {
            'name': REPO_NAME,
            'description': 'Reposit√≥rio principal do sistema SPR (Sistema de Produ√ß√£o Rural)',
            'private': True,
            'auto_init': True,
            'gitignore_template': 'Python'
        }
        
        # Escolhe endpoint baseado em organiza√ß√£o ou usu√°rio
        if is_org:
            endpoint = f'orgs/{OWNER}/repos'
        else:
            endpoint = 'user/repos'
        
        try:
            response = self._make_github_request('POST', endpoint, json=repo_data)
            
            if response.status_code == 201:
                print(f"‚úÖ Reposit√≥rio {OWNER}/{REPO_NAME} criado com sucesso")
                return True
            else:
                print(f"‚ùå Erro ao criar reposit√≥rio: {response.status_code}")
                print(f"   Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao criar reposit√≥rio: {e}")
            return False
    
    def ensure_repository_exists(self):
        """Garante que o reposit√≥rio existe"""
        if not self.check_repository_exists():
            return self.create_repository()
        return True
    
    def cleanup_temp_directory(self):
        """Remove diret√≥rio tempor√°rio"""
        if TEMP_DIR.exists():
            print(f"üßπ Removendo diret√≥rio tempor√°rio: {TEMP_DIR}")
            shutil.rmtree(TEMP_DIR)
    
    def clone_repository(self):
        """Clona o reposit√≥rio"""
        print(f"üì• Clonando reposit√≥rio {OWNER}/{REPO_NAME}...")
        
        # Remove diret√≥rio tempor√°rio se existir
        self.cleanup_temp_directory()
        
        # Obt√©m token para URL de clonagem
        token = self.auth.get_installation_token()
        if not token:
            raise Exception("N√£o foi poss√≠vel obter token para clonagem")
        
        # URL com autentica√ß√£o
        repo_url = f"https://x-access-token:{token}@github.com/{OWNER}/{REPO_NAME}.git"
        
        try:
            repo = Repo.clone_from(repo_url, TEMP_DIR)
            print(f"‚úÖ Reposit√≥rio clonado em: {TEMP_DIR}")
            return repo
        except Exception as e:
            print(f"‚ùå Erro ao clonar reposit√≥rio: {e}")
            return None
    
    def sync_files(self, repo):
        """Sincroniza arquivos da pasta SPR"""
        print(f"üîÑ Sincronizando arquivos de {SPR_DIR} para {TEMP_DIR}...")
        
        if not SPR_DIR.exists():
            print(f"‚ùå Pasta SPR n√£o encontrada: {SPR_DIR}")
            return False
        
        try:
            # Copia arquivos da pasta SPR para o reposit√≥rio
            for item in SPR_DIR.iterdir():
                if item.is_file():
                    dest_file = TEMP_DIR / item.name
                    shutil.copy2(item, dest_file)
                    print(f"   üìÑ Copiado: {item.name}")
                elif item.is_dir():
                    dest_dir = TEMP_DIR / item.name
                    if dest_dir.exists():
                        shutil.rmtree(dest_dir)
                    shutil.copytree(item, dest_dir)
                    print(f"   üìÅ Copiado: {item.name}/")
            
            print("‚úÖ Arquivos sincronizados com sucesso")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao sincronizar arquivos: {e}")
            return False
    
    def commit_and_push(self, repo):
        """Faz commit e push das altera√ß√µes"""
        print("üíæ Fazendo commit e push das altera√ß√µes...")
        
        try:
            # Adiciona todos os arquivos
            repo.git.add(A=True)
            
            # Verifica se h√° altera√ß√µes
            if not repo.index.diff("HEAD"):
                print("‚ÑπÔ∏è  Nenhuma altera√ß√£o detectada")
                return True
            
            # Configura usu√°rio Git
            repo.config_writer().set_value("user", "name", "SPR Sync Script").release()
            repo.config_writer().set_value("user", "email", "spr-sync@royal-agro.com").release()
            
            # Faz commit
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            commit_message = f"SPR Sync - Atualiza√ß√£o autom√°tica em {timestamp}"
            
            repo.index.commit(commit_message)
            print(f"‚úÖ Commit realizado: {commit_message}")
            
            # Faz push
            origin = repo.remote(name='origin')
            origin.push()
            print("‚úÖ Push realizado com sucesso")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao fazer commit/push: {e}")
            return False
    
    def run_sync(self):
        """Executa sincroniza√ß√£o completa"""
        print("üöÄ Iniciando sincroniza√ß√£o SPR...")
        print(f"üìç Diret√≥rio de trabalho: {SCRIPT_DIR}")
        print(f"üìÇ Pasta SPR: {SPR_DIR}")
        print(f"üéØ Reposit√≥rio: {OWNER}/{REPO_NAME}")
        print("-" * 50)
        
        try:
            # 1. Garante que o reposit√≥rio existe
            if not self.ensure_repository_exists():
                raise Exception("Falha ao garantir exist√™ncia do reposit√≥rio")
            
            # 2. Clona o reposit√≥rio
            repo = self.clone_repository()
            if not repo:
                raise Exception("Falha ao clonar reposit√≥rio")
            
            # 3. Sincroniza arquivos
            if not self.sync_files(repo):
                raise Exception("Falha ao sincronizar arquivos")
            
            # 4. Faz commit e push
            if not self.commit_and_push(repo):
                raise Exception("Falha ao fazer commit/push")
            
            # 5. Limpeza
            self.cleanup_temp_directory()
            
            print("-" * 50)
            print("üéâ Sincroniza√ß√£o conclu√≠da com sucesso!")
            print(f"üìç Reposit√≥rio: https://github.com/{OWNER}/{REPO_NAME}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na sincroniza√ß√£o: {e}")
            self.cleanup_temp_directory()
            return False

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("üì¶ SPR 1.1 - Script de Sincroniza√ß√£o com GitHub")
    print("=" * 60)
    
    # Verifica se os arquivos necess√°rios existem
    if not CONFIG_FILE.exists():
        print(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {CONFIG_FILE}")
        sys.exit(1)
    
    if not PEM_FILE.exists():
        print(f"‚ùå Arquivo de chave privada n√£o encontrado: {PEM_FILE}")
        sys.exit(1)
    
    # Executa sincroniza√ß√£o
    sync_manager = SPRSyncManager()
    success = sync_manager.run_sync()
    
    if success:
        print("\n‚úÖ Script executado com sucesso!")
        sys.exit(0)
    else:
        print("\n‚ùå Script falhou!")
        sys.exit(1)

if __name__ == "__main__":
    main()
