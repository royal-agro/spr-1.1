#!/bin/bash
# SPR 1.1 - Demonstra√ß√£o de Execu√ß√£o Completa
# Este script demonstra como executar o pipeline completo

set -e  # Para em caso de erro

echo "üåæ SPR 1.1 - Demonstra√ß√£o de Execu√ß√£o Completa"
echo "=============================================="
echo ""

# Fun√ß√£o para logging colorido
log_info() {
    echo "‚ÑπÔ∏è  $1"
}

log_success() {
    echo "‚úÖ $1"
}

log_warning() {
    echo "‚ö†Ô∏è  $1"
}

log_error() {
    echo "‚ùå $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "pyproject.toml" ] || [ ! -d "SPR1.1" ]; then
    log_error "Execute este script no diret√≥rio que cont√©m SPR1.1/"
    exit 1
fi

log_info "Iniciando demonstra√ß√£o do SPR 1.1..."

# 1. Setup do ambiente
echo ""
echo "üìã Etapa 1: Setup do Ambiente"
echo "------------------------------"

if [ ! -d "venv" ]; then
    log_info "Criando ambiente virtual..."
    python -m venv venv
    log_success "Ambiente virtual criado"
else
    log_info "Ambiente virtual j√° existe"
fi

# Ativar ambiente virtual
log_info "Ativando ambiente virtual..."
source venv/bin/activate || {
    log_error "Falha ao ativar ambiente virtual"
    exit 1
}

# Instalar depend√™ncias
log_info "Instalando depend√™ncias..."
pip install -e . > /tmp/pip_install.log 2>&1 || {
    log_error "Falha na instala√ß√£o das depend√™ncias"
    cat /tmp/pip_install.log
    exit 1
}
log_success "Depend√™ncias instaladas"

# 2. Inicializa√ß√£o
echo ""
echo "üèóÔ∏è  Etapa 2: Inicializa√ß√£o"
echo "-------------------------"

cd SPR1.1

log_info "Inicializando estrutura SPR..."
python -m jobs.cli init
log_success "Estrutura inicializada"

# 3. Verifica√ß√£o de status
echo ""
echo "üîç Etapa 3: Verifica√ß√£o de Status"
echo "--------------------------------"

log_info "Verificando status dos conectores..."
python -m jobs.cli status

# 4. Sincroniza√ß√£o INMET (exemplo com dados limitados)
echo ""
echo "üå°Ô∏è  Etapa 4: Sincroniza√ß√£o INMET"
echo "-------------------------------"

log_info "Sincronizando cat√°logo de esta√ß√µes..."
if python -m jobs.cli inmet sync-estacoes; then
    log_success "Esta√ß√µes INMET sincronizadas"
else
    log_warning "Problema na sincroniza√ß√£o de esta√ß√µes (pode ser conectividade)"
fi

log_info "Sincronizando s√©ries di√°rias (√∫ltimos 7 dias, MT)..."
INICIO=$(date -d '7 days ago' +%Y-%m-%d)
FIM=$(date +%Y-%m-%d)

if python -m jobs.cli inmet sync-series --inicio $INICIO --fim $FIM --freq D --uf MT; then
    log_success "S√©ries INMET sincronizadas"
else
    log_warning "Problema na sincroniza√ß√£o de s√©ries (pode ser conectividade ou falta de dados)"
fi

# 5. Sincroniza√ß√£o MAPA (discovery apenas)
echo ""
echo "üåæ Etapa 5: Discovery MAPA-CKAN"
echo "------------------------------"

log_info "Descobrindo datasets MAPA dispon√≠veis..."
if python -m jobs.cli mapa discover; then
    log_success "Discovery MAPA conclu√≠do"
else
    log_warning "Problema no discovery MAPA (pode ser conectividade)"
fi

# Tentar baixar um dataset pequeno
log_info "Tentando baixar dataset ZARC..."
if python -m jobs.cli mapa sync-zarc; then
    log_success "ZARC baixado"
else
    log_warning "Problema no download ZARC (pode ser conectividade ou dataset n√£o encontrado)"
fi

# 6. Sincroniza√ß√£o CONAB (exemplo limitado)
echo ""
echo "üí∞ Etapa 6: Sincroniza√ß√£o CONAB"
echo "------------------------------"

log_info "Sincronizando safras CONAB..."
if python -m jobs.cli conab sync-safras; then
    log_success "Safras CONAB sincronizadas"
else
    log_warning "Problema na sincroniza√ß√£o de safras (pode ser conectividade)"
fi

log_info "Sincronizando pre√ßos (√∫ltima semana, soja/milho, produtor)..."
if python -m jobs.cli conab sync-precos --produto soja,milho --nivel produtor --inicio $INICIO --fim $FIM; then
    log_success "Pre√ßos CONAB sincronizados"
else
    log_warning "Problema na sincroniza√ß√£o de pre√ßos (pode ser conectividade ou per√≠odo inv√°lido)"
fi

# 7. Processamento de features
echo ""
echo "‚öôÔ∏è  Etapa 7: Processamento de Features"
echo "------------------------------------"

log_info "Processando features meteorol√≥gicas..."
if python -m jobs.cli inmet process-features; then
    log_success "Features processadas"
else
    log_warning "Problema no processamento de features (pode precisar de mais dados)"
fi

# 8. Relat√≥rios e valida√ß√£o
echo ""
echo "üìä Etapa 8: Relat√≥rios e Valida√ß√£o"
echo "---------------------------------"

log_info "Gerando relat√≥rio consolidado..."
python -m jobs.cli report

log_info "Validando integridade dos dados..."
python -m jobs.cli validate

# 9. Demonstra√ß√£o de an√°lise
echo ""
echo "üìà Etapa 9: Demonstra√ß√£o de An√°lise"
echo "----------------------------------"

log_info "Executando script de exemplo..."
if [ -f "examples/quick_start.py" ]; then
    python examples/quick_start.py || {
        log_warning "Script de exemplo falhou (pode precisar de mais dados)"
    }
else
    log_warning "Script de exemplo n√£o encontrado"
fi

# 10. Verifica√ß√£o final
echo ""
echo "üîç Etapa 10: Verifica√ß√£o Final"
echo "-----------------------------"

log_info "Verificando arquivos gerados..."

echo ""
echo "üìÅ Estrutura de dados criada:"
find data/ -name "*.parquet" -exec ls -lh {} \; 2>/dev/null | head -10 || {
    log_warning "Nenhum arquivo Parquet encontrado (pode indicar problemas de conectividade)"
}

echo ""
echo "üìù Logs gerados:"
ls -lh logs/ 2>/dev/null || log_warning "Diret√≥rio de logs n√£o encontrado"

echo ""
echo "üìã Metadados:"
find data/metadata/ -name "*.json" -exec ls -lh {} \; 2>/dev/null | head -5 || {
    log_warning "Nenhum metadata encontrado"
}

# 11. Resumo final
echo ""
echo "üìä RESUMO DA DEMONSTRA√á√ÉO"
echo "========================"

# Contar arquivos gerados
RAW_COUNT=$(find data/raw/ -type f 2>/dev/null | wc -l)
STAGING_COUNT=$(find data/staging/ -type f 2>/dev/null | wc -l)
CURATED_COUNT=$(find data/curated/ -type f 2>/dev/null | wc -l)
METADATA_COUNT=$(find data/metadata/ -type f 2>/dev/null | wc -l)

echo "üìÅ Arquivos gerados:"
echo "   ‚Ä¢ Raw: $RAW_COUNT"
echo "   ‚Ä¢ Staging: $STAGING_COUNT"
echo "   ‚Ä¢ Curated: $CURATED_COUNT"
echo "   ‚Ä¢ Metadata: $METADATA_COUNT"

# Verificar comandos CLI
echo ""
echo "üîß Comandos CLI dispon√≠veis:"
python -m jobs.cli --help | grep "Commands:" -A 20

echo ""
echo "üéØ Status final:"
python -m jobs.cli status

echo ""
echo "‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA!"
echo "========================="
echo ""
echo "üìö Pr√≥ximos passos:"
echo "   ‚Ä¢ Para sincroniza√ß√£o completa: python -m jobs.cli sync-all --inicio 2014-01-01"
echo "   ‚Ä¢ Para agendamento: bash examples/cron_setup.sh"
echo "   ‚Ä¢ Para an√°lises: python examples/analysis_notebook.py"
echo "   ‚Ä¢ Documenta√ß√£o: cat README.md"
echo ""
echo "‚ö†Ô∏è  Notas importantes:"
echo "   ‚Ä¢ Esta demonstra√ß√£o usa dados limitados para ser r√°pida"
echo "   ‚Ä¢ Problemas de conectividade com APIs externas s√£o normais"
echo "   ‚Ä¢ Para uso produtivo, configure .env com suas credenciais se necess√°rio"
echo "   ‚Ä¢ Verifique logs em logs/spr.log para detalhes de erros"
echo ""
echo "üåæ SPR 1.1 est√° pronto para uso!"

# Retorna ao diret√≥rio original
cd ..

exit 0