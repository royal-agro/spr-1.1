# routers/price_locator.py
# üì¶ SPR 1.1 ‚Äì Router para Price Locator (Localizador de Pre√ßos √ìtimos)

from fastapi import APIRouter, HTTPException, Query
from pydantic import BaseModel, validator
from typing import Dict, List, Optional
from datetime import datetime
import logging

from app.precificacao.price_locator import PriceLocator

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter(prefix="/price-locator", tags=["price-locator"])

# Modelos Pydantic para valida√ß√£o
class PriceSearchRequest(BaseModel):
    """Modelo para requisi√ß√£o de busca de pre√ßos"""
    buyer_location: str
    product_id: str
    volume: Optional[float] = None
    weights: Optional[Dict[str, float]] = None
    
    @validator('weights')
    def validate_weights(cls, v):
        if v is not None:
            if not isinstance(v, dict):
                raise ValueError("Weights deve ser um dicion√°rio")
            
            required_keys = {'price', 'time', 'quality'}
            if not required_keys.issubset(v.keys()):
                raise ValueError(f"Weights deve conter as chaves: {required_keys}")
            
            if abs(sum(v.values()) - 1.0) > 0.01:
                raise ValueError("Pesos devem somar 1.0")
        
        return v
    
    @validator('volume')
    def validate_volume(cls, v):
        if v is not None and v <= 0:
            raise ValueError("Volume deve ser positivo")
        return v

class PriceChoiceResponse(BaseModel):
    """Modelo para resposta de op√ß√£o de pre√ßo"""
    origin_region: str
    product_price: float
    freight_cost: float
    delivery_days: int
    quality_score: float
    composite_score: float
    total_cost: float
    supplier: str
    confidence: float

class PriceSearchResponse(BaseModel):
    """Modelo para resposta de busca de pre√ßos"""
    product_id: str
    buyer_location: str
    search_timestamp: str
    weights_used: Dict[str, float]
    choices: List[PriceChoiceResponse]
    best_choice: Optional[PriceChoiceResponse]
    total_options_found: int

# Inst√¢ncia global do PriceLocator
price_locator = PriceLocator()

@router.post("/search", response_model=PriceSearchResponse)
async def search_best_prices(request: PriceSearchRequest):
    """
    Busca os melhores pre√ßos para um produto em todo o Brasil.
    
    Este endpoint implementa a funcionalidade principal do Price Locator,
    encontrando os locais mais vantajosos para comprar um produto considerando
    pre√ßo, frete, tempo de entrega e qualidade.
    
    Args:
        request: Dados da busca (localiza√ß√£o, produto, volume, pesos)
        
    Returns:
        Lista ordenada de op√ß√µes de compra com scores otimizados
        
    Raises:
        HTTPException: Em caso de erro na busca ou valida√ß√£o
    """
    try:
        logger.info(f"üîç Nova busca: {request.product_id} para {request.buyer_location}")
        
        # Validar produto suportado
        supported_products = price_locator.get_supported_products()
        if request.product_id not in supported_products:
            raise HTTPException(
                status_code=400,
                detail=f"Produto '{request.product_id}' n√£o suportado. "
                       f"Produtos dispon√≠veis: {supported_products}"
            )
        
        # Executar busca
        result = price_locator.find_best_prices(
            buyer_location=request.buyer_location,
            product_id=request.product_id,
            volume=request.volume,
            weights=request.weights
        )
        
        # Verificar se houve erro
        if 'error' in result:
            raise HTTPException(
                status_code=400,
                detail=result['error']
            )
        
        # Converter para modelo de resposta
        response = PriceSearchResponse(**result)
        
        logger.info(f"‚úÖ Busca conclu√≠da: {response.total_options_found} op√ß√µes encontradas")
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro na busca de pre√ßos: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno: {str(e)}"
        )

@router.get("/products", response_model=List[str])
async def get_supported_products():
    """
    Retorna lista de produtos suportados pelo Price Locator.
    
    Returns:
        Lista de IDs de produtos suportados
    """
    try:
        products = price_locator.get_supported_products()
        logger.info(f"üìã Produtos suportados: {len(products)}")
        return products
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter produtos: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno: {str(e)}"
        )

@router.get("/regions", response_model=Dict[str, Dict])
async def get_supported_regions():
    """
    Retorna regi√µes suportadas pelo Price Locator.
    
    Returns:
        Dicion√°rio com regi√µes e suas informa√ß√µes
    """
    try:
        regions = price_locator.get_supported_regions()
        logger.info(f"üó∫Ô∏è Regi√µes suportadas: {len(regions)}")
        return regions
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter regi√µes: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno: {str(e)}"
        )

@router.post("/clear-cache")
async def clear_cache():
    """
    Limpa o cache de pre√ßos e fretes.
    
    √ötil para for√ßar atualiza√ß√£o de dados ou resolver problemas de cache.
    
    Returns:
        Confirma√ß√£o de limpeza do cache
    """
    try:
        price_locator.clear_cache()
        logger.info("üóëÔ∏è Cache limpo via API")
        return {"message": "Cache limpo com sucesso"}
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao limpar cache: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno: {str(e)}"
        )

@router.get("/search/{product_id}")
async def quick_search(
    product_id: str,
    buyer_location: str = Query(..., description="CEP ou coordenadas (lat,lon)"),
    volume: Optional[float] = Query(None, description="Volume desejado"),
    price_weight: float = Query(0.5, description="Peso para pre√ßo (0.0-1.0)"),
    time_weight: float = Query(0.3, description="Peso para tempo (0.0-1.0)"),
    quality_weight: float = Query(0.2, description="Peso para qualidade (0.0-1.0)")
):
    """
    Busca r√°pida de pre√ßos via par√¢metros de query.
    
    Endpoint alternativo para busca simples sem corpo de requisi√ß√£o.
    
    Args:
        product_id: ID do produto
        buyer_location: Localiza√ß√£o do comprador
        volume: Volume desejado (opcional)
        price_weight: Peso para pre√ßo
        time_weight: Peso para tempo
        quality_weight: Peso para qualidade
        
    Returns:
        Resultado da busca de pre√ßos
    """
    try:
        # Validar pesos
        weights = {
            'price': price_weight,
            'time': time_weight,
            'quality': quality_weight
        }
        
        if abs(sum(weights.values()) - 1.0) > 0.01:
            raise HTTPException(
                status_code=400,
                detail="Pesos devem somar 1.0"
            )
        
        # Criar requisi√ß√£o
        request = PriceSearchRequest(
            buyer_location=buyer_location,
            product_id=product_id,
            volume=volume,
            weights=weights
        )
        
        # Executar busca
        return await search_best_prices(request)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro na busca r√°pida: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno: {str(e)}"
        )

@router.get("/health")
async def health_check():
    """
    Verifica sa√∫de do servi√ßo Price Locator.
    
    Returns:
        Status do servi√ßo e informa√ß√µes b√°sicas
    """
    try:
        products_count = len(price_locator.get_supported_products())
        regions_count = len(price_locator.get_supported_regions())
        
        return {
            "status": "healthy",
            "service": "Price Locator",
            "version": "1.1",
            "supported_products": products_count,
            "supported_regions": regions_count,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro no health check: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Servi√ßo indispon√≠vel: {str(e)}"
        ) 