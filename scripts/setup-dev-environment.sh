#!/bin/bash

# Setup Development Environment for SPR Multi-Agent Team
# Usage: ./setup-dev-environment.sh [agent_name]

set -e

PROJECT_ROOT="/home/cadu/projeto_SPR"
CONFIG_FILE="$PROJECT_ROOT/config/dev_environments.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🤖 SPR Multi-Agent Development Environment Setup${NC}"

# Function to display available agents
show_agents() {
    echo -e "${YELLOW}Available agents:${NC}"
    echo "1. database_engineer - PostgreSQL Specialist"
    echo "2. backend_python - FastAPI/AgriTech"
    echo "3. frontend_react - React/TypeScript"
    echo "4. whatsapp_specialist - WhatsApp Integration"
    echo "5. business_intelligence - Analytics & BI"
    echo "6. agritech_data - Data Specialist"
    echo "7. devops_infrastructure - DevOps & Infrastructure"
    echo "8. qa_testing - QA & Testing"
    echo "9. product_manager - Product Management"
    echo "10. financial_modeling - Financial Modeling"
    echo "11. all - Setup all environments"
}

# Function to setup Docker containers
setup_docker() {
    echo -e "${BLUE}🐳 Setting up Docker containers...${NC}"
    cd "$PROJECT_ROOT"
    
    # Create development docker-compose override
    cat > docker-compose.dev.yml << 'EOF'
version: '3.8'

services:
  postgres:
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=spr_agritech_dev
      - POSTGRES_USER=spr_dev_user
      - POSTGRES_PASSWORD=spr_dev_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_URL=postgresql://spr_dev_user:spr_dev_password@postgres:5432/spr_agritech_dev
      - REDIS_URL=redis://redis:6379
      - FASTAPI_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  frontend:
    build:
      context: ./frontend
      dockerfile: ../Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: ["npm", "start"]

volumes:
  postgres_dev_data:
  redis_dev_data:
EOF

    docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d postgres redis
    echo -e "${GREEN}✅ Docker containers started${NC}"
}

# Function to setup Python environment
setup_python_env() {
    local agent_name=$1
    echo -e "${BLUE}🐍 Setting up Python environment for $agent_name...${NC}"
    
    # Create virtual environment if it doesn't exist
    if [ ! -d "$PROJECT_ROOT/venv_$agent_name" ]; then
        python3.11 -m venv "$PROJECT_ROOT/venv_$agent_name"
        echo -e "${GREEN}✅ Created virtual environment for $agent_name${NC}"
    fi
    
    # Activate and install requirements
    source "$PROJECT_ROOT/venv_$agent_name/bin/activate"
    pip install --upgrade pip
    pip install -r "$PROJECT_ROOT/requirements.txt"
    
    # Install agent-specific packages
    case $agent_name in
        "business_intelligence")
            pip install jupyter plotly dash streamlit
            ;;
        "agritech_data")
            pip install geopandas folium requests-cache
            ;;
        "financial_modeling")
            pip install scipy scikit-learn tensorflow quantlib-python
            ;;
    esac
    
    echo -e "${GREEN}✅ Python environment ready for $agent_name${NC}"
}

# Function to setup Node.js environment
setup_node_env() {
    local agent_name=$1
    echo -e "${BLUE}📦 Setting up Node.js environment for $agent_name...${NC}"
    
    cd "$PROJECT_ROOT"
    
    case $agent_name in
        "frontend_react")
            cd frontend
            npm install
            echo -e "${GREEN}✅ Frontend dependencies installed${NC}"
            ;;
        "whatsapp_specialist")
            npm install puppeteer whatsapp-web.js socket.io express
            echo -e "${GREEN}✅ WhatsApp dependencies installed${NC}"
            ;;
    esac
}

# Function to create agent-specific development scripts
create_dev_scripts() {
    local agent_name=$1
    local script_dir="$PROJECT_ROOT/scripts/agents"
    
    mkdir -p "$script_dir"
    
    cat > "$script_dir/dev-$agent_name.sh" << EOF
#!/bin/bash

# Development script for $agent_name
# Generated by setup-dev-environment.sh

cd "$PROJECT_ROOT"

case "$agent_name" in
    "database_engineer")
        echo "🗄 Starting Database Engineer environment..."
        docker-compose -f docker-compose.yml -f docker-compose.dev.yml up postgres redis pgadmin
        ;;
    "backend_python")
        echo "🐍 Starting Backend Python environment..."
        source venv_backend_python/bin/activate
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
        ;;
    "frontend_react")
        echo "⚛️ Starting Frontend React environment..."
        cd frontend && npm start
        ;;
    "whatsapp_specialist")
        echo "💬 Starting WhatsApp environment..."
        node backend_server_fixed.js
        ;;
    "business_intelligence")
        echo "📊 Starting BI environment..."
        source venv_business_intelligence/bin/activate
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser
        ;;
    "agritech_data")
        echo "🌾 Starting AgriTech Data environment..."
        source venv_agritech_data/bin/activate
        python app/dados_governo/cli.py
        ;;
    "devops_infrastructure")
        echo "🔐 Starting DevOps environment..."
        docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
        ;;
    "qa_testing")
        echo "🧪 Starting QA Testing environment..."
        pytest --verbose
        ;;
    "financial_modeling")
        echo "💼 Starting Financial Modeling environment..."
        source venv_financial_modeling/bin/activate
        python -m app.precificacao.previsao_precos
        ;;
esac
EOF
    
    chmod +x "$script_dir/dev-$agent_name.sh"
    echo -e "${GREEN}✅ Created development script for $agent_name${NC}"
}

# Function to setup specific agent environment
setup_agent() {
    local agent_name=$1
    echo -e "${YELLOW}Setting up environment for: $agent_name${NC}"
    
    case $agent_name in
        "database_engineer")
            setup_docker
            ;;
        "backend_python"|"business_intelligence"|"agritech_data"|"financial_modeling"|"qa_testing")
            setup_python_env "$agent_name"
            ;;
        "frontend_react"|"whatsapp_specialist")
            setup_node_env "$agent_name"
            ;;
        "devops_infrastructure")
            setup_docker
            ;;
    esac
    
    create_dev_scripts "$agent_name"
}

# Main execution
if [ $# -eq 0 ]; then
    show_agents
    read -p "Enter agent name or number (1-11): " choice
    
    case $choice in
        1|database_engineer) setup_agent "database_engineer" ;;
        2|backend_python) setup_agent "backend_python" ;;
        3|frontend_react) setup_agent "frontend_react" ;;
        4|whatsapp_specialist) setup_agent "whatsapp_specialist" ;;
        5|business_intelligence) setup_agent "business_intelligence" ;;
        6|agritech_data) setup_agent "agritech_data" ;;
        7|devops_infrastructure) setup_agent "devops_infrastructure" ;;
        8|qa_testing) setup_agent "qa_testing" ;;
        9|product_manager) setup_agent "product_manager" ;;
        10|financial_modeling) setup_agent "financial_modeling" ;;
        11|all)
            for agent in database_engineer backend_python frontend_react whatsapp_specialist business_intelligence agritech_data devops_infrastructure qa_testing product_manager financial_modeling; do
                setup_agent "$agent"
            done
            ;;
        *) echo -e "${RED}Invalid choice${NC}" && exit 1 ;;
    esac
else
    setup_agent "$1"
fi

echo -e "${GREEN}🎉 Development environment setup completed!${NC}"
echo -e "${BLUE}Next steps:${NC}"
echo "1. Run specific agent: ./scripts/agents/dev-[agent_name].sh"
echo "2. Check agent configuration: cat config/dev_environments.json"
echo "3. View logs: tail -f logs/spr_[component].log"