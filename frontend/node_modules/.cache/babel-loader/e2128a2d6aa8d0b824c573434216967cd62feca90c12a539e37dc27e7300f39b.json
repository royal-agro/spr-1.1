{"ast":null,"code":"var _jsxFileName = \"/home/cadu/projeto_SPR/frontend/src/components/Dashboard/CommodityChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Dados simulados para os últimos 30 dias\nconst generateChartData = commodities => {\n  const days = 30;\n  const dates = Array.from({\n    length: days\n  }, (_, i) => {\n    const date = new Date();\n    date.setDate(date.getDate() - (days - 1 - i));\n    return date.toLocaleDateString('pt-BR', {\n      month: 'short',\n      day: 'numeric'\n    });\n  });\n  const chartData = dates.map((date, index) => {\n    const dataPoint = {\n      date\n    };\n    Object.entries(commodities).forEach(([commodity, info]) => {\n      // Simular variação histórica mais pronunciada\n      const basePrice = info.price;\n      const volatility = Math.max(0.05, Math.abs(info.variation) * 0.2); // Mínimo 5% de volatilidade\n      const trend = info.variation / 100; // Tendência baseada na variação atual\n\n      // Gerar variação senoidal para criar movimento mais visível\n      const sineFactor = Math.sin(index / days * Math.PI * 2) * 0.03; // Variação senoidal de 3%\n      const randomFactor = (Math.random() - 0.5) * volatility;\n      const trendFactor = index / days * trend;\n      const price = basePrice * (1 + trendFactor + randomFactor + sineFactor);\n      dataPoint[commodity] = Number(price.toFixed(2));\n    });\n    return dataPoint;\n  });\n  console.log('Generated chart data:', chartData); // Debug\n  return chartData;\n};\nconst CommodityChart = ({\n  data\n}) => {\n  _s();\n  const [viewMode, setViewMode] = useState('normalized');\n  const [selectedCommodity, setSelectedCommodity] = useState('all');\n  const chartData = generateChartData(data);\n\n  // Cores para cada commodity\n  const colors = {\n    soja: '#10B981',\n    // Verde\n    milho: '#F59E0B',\n    // Amarelo\n    algodao: '#EF4444',\n    // Vermelho\n    boi: '#8B5CF6',\n    // Roxo\n    dolar: '#3B82F6' // Azul\n  };\n\n  // Função para obter commodities visíveis\n  const getVisibleCommodities = () => {\n    if (selectedCommodity === 'all') {\n      return Object.keys(data);\n    }\n    return [selectedCommodity];\n  };\n\n  // Função para normalizar valores (0-100 baseado no valor inicial)\n  const normalizeToPercentage = (commodity, currentValue, index) => {\n    const initialValue = chartData[0][commodity];\n    return (currentValue - initialValue) / initialValue * 100;\n  };\n\n  // Função para normalizar valores para escala 0-100\n  const normalizeToScale = commodity => {\n    const values = chartData.map(item => item[commodity]);\n    const min = Math.min(...values);\n    const max = Math.max(...values);\n    const range = max - min;\n    return chartData.map(item => {\n      if (range === 0) return 50; // Se não há variação, centraliza\n      return (item[commodity] - min) / range * 100;\n    });\n  };\n\n  // Função para obter valores baseados no modo de visualização\n  const getChartValues = () => {\n    const result = {};\n    const visibleCommodities = getVisibleCommodities();\n    visibleCommodities.forEach(commodity => {\n      if (viewMode === 'absolute') {\n        // Valores absolutos - usar escala individual para cada commodity\n        result[commodity] = normalizeToScale(commodity);\n      } else if (viewMode === 'normalized') {\n        // Valores normalizados (0-100 baseado no min/max individual)\n        result[commodity] = normalizeToScale(commodity);\n      } else {\n        // Variação percentual baseada no primeiro valor\n        result[commodity] = chartData.map((item, index) => {\n          const percentChange = normalizeToPercentage(commodity, item[commodity], index);\n          // Converter para escala 0-100 (50 = 0% de variação)\n          return 50 + percentChange * 2; // Amplifica a variação para melhor visualização\n        });\n      }\n    });\n    return result;\n  };\n  const chartValues = getChartValues();\n  console.log('Chart values:', chartValues); // Debug\n\n  // Gerar pontos para cada linha com curvas suaves\n  const generatePath = commodity => {\n    const values = chartValues[commodity];\n    if (!values || values.length === 0) return '';\n    if (values.length === 1) {\n      const x = 0;\n      const y = 100 - values[0];\n      return `M ${x} ${y}`;\n    }\n    let path = '';\n\n    // Começar o caminho\n    const firstX = 0;\n    const firstY = 100 - values[0];\n    path += `M ${firstX} ${firstY}`;\n\n    // Criar curvas suaves usando curvas quadráticas Bézier\n    for (let i = 1; i < values.length; i++) {\n      const currentX = i / (values.length - 1) * 100;\n      const currentY = 100 - values[i];\n      if (i === 1) {\n        // Primeira curva - usar controle simples\n        const prevX = (i - 1) / (values.length - 1) * 100;\n        const controlX = (prevX + currentX) / 2;\n        const controlY = 100 - values[i - 1];\n        path += ` Q ${controlX} ${controlY} ${currentX} ${currentY}`;\n      } else {\n        // Curvas subsequentes - usar controles mais suaves\n        const prevX = (i - 1) / (values.length - 1) * 100;\n        const prevY = 100 - values[i - 1];\n\n        // Calcular ponto de controle para suavização\n        const controlX = prevX + (currentX - prevX) * 0.5;\n        const controlY = prevY + (currentY - prevY) * 0.3;\n        path += ` Q ${controlX} ${controlY} ${currentX} ${currentY}`;\n      }\n    }\n    return path;\n  };\n\n  // Função para obter label do eixo Y baseado no modo\n  const getYAxisLabels = () => {\n    if (viewMode === 'percentage') {\n      return ['+10%', '+5%', '0%', '-5%', '-10%'];\n    } else if (viewMode === 'normalized') {\n      return ['Máx', '75%', '50%', '25%', 'Mín'];\n    } else {\n      return ['Alto', '75%', '50%', '25%', 'Baixo'];\n    }\n  };\n\n  // Função para obter tooltip\n  const getTooltipValue = (commodity, index) => {\n    const actualValue = chartData[index][commodity];\n    const unit = data[commodity].unit;\n    if (viewMode === 'percentage') {\n      const percentChange = normalizeToPercentage(commodity, actualValue, index);\n      return `${percentChange >= 0 ? '+' : ''}${percentChange.toFixed(2)}%`;\n    } else {\n      return `${actualValue.toFixed(2)} ${unit}`;\n    }\n  };\n\n  // Função para obter o nome formatado da commodity\n  const getCommodityName = commodity => {\n    return commodity === 'algodao' ? 'Algodão' : commodity === 'dolar' ? 'Dólar' : commodity;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap justify-between items-center mb-4 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setViewMode('normalized'),\n          className: `px-3 py-1 text-sm rounded-lg transition-colors ${viewMode === 'normalized' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`,\n          children: \"Normalizado\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setViewMode('percentage'),\n          className: `px-3 py-1 text-sm rounded-lg transition-colors ${viewMode === 'percentage' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`,\n          children: \"Varia\\xE7\\xE3o %\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setViewMode('absolute'),\n          className: `px-3 py-1 text-sm rounded-lg transition-colors ${viewMode === 'absolute' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`,\n          children: \"Absoluto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"text-sm font-medium text-gray-700\",\n          children: \"Commodity:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedCommodity,\n          onChange: e => setSelectedCommodity(e.target.value),\n          className: \"px-3 py-1 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"Todas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), Object.keys(data).map(commodity => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: commodity,\n            children: getCommodityName(commodity)\n          }, commodity, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap gap-4\",\n        children: getVisibleCommodities().map(commodity => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-3 h-3 rounded-full\",\n            style: {\n              backgroundColor: colors[commodity]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600 capitalize\",\n            children: getCommodityName(commodity)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)]\n        }, commodity, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 p-3 bg-blue-50 rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-blue-800\",\n        children: [viewMode === 'normalized' && 'Modo Normalizado: Cada commodity é escalada individualmente de 0% a 100% baseado em seus valores mínimo e máximo.', viewMode === 'percentage' && 'Modo Variação %: Mostra a variação percentual de cada commodity em relação ao primeiro valor do período.', viewMode === 'absolute' && 'Modo Absoluto: Cada commodity é escalada individualmente para melhor visualização das tendências.', selectedCommodity !== 'all' && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ml-2 font-medium\",\n          children: [\"Visualizando apenas: \", getCommodityName(selectedCommodity)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full\",\n      style: {\n        height: 'calc(100% - 200px)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        viewBox: \"0 0 100 100\",\n        className: \"w-full h-full border border-gray-200 rounded-lg bg-gray-50\",\n        preserveAspectRatio: \"none\",\n        children: [[0, 25, 50, 75, 100].map(y => /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"0\",\n          y1: y,\n          x2: \"100\",\n          y2: y,\n          stroke: \"#E5E7EB\",\n          strokeWidth: \"0.2\"\n        }, y, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this)), Array.from({\n          length: 7\n        }, (_, i) => i * (100 / 6)).map(x => /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: x,\n          y1: \"0\",\n          x2: x,\n          y2: \"100\",\n          stroke: \"#E5E7EB\",\n          strokeWidth: \"0.2\"\n        }, x, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this)), viewMode === 'percentage' && /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"0\",\n          y1: \"50\",\n          x2: \"100\",\n          y2: \"50\",\n          stroke: \"#6B7280\",\n          strokeWidth: \"0.4\",\n          strokeDasharray: \"2,2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), getVisibleCommodities().map(commodity => {\n          const path = generatePath(commodity);\n          console.log(`Path for ${commodity}:`, path); // Debug\n          return /*#__PURE__*/_jsxDEV(\"path\", {\n            d: path,\n            fill: \"none\",\n            stroke: colors[commodity],\n            strokeWidth: selectedCommodity === 'all' ? '0.8' : '1.2',\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            className: \"hover:opacity-100 transition-opacity\",\n            style: {\n              opacity: selectedCommodity === 'all' ? 0.85 : 1\n            }\n          }, commodity, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this);\n        }), getVisibleCommodities().map(commodity => chartValues[commodity].map((value, index) => /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: index / (chartValues[commodity].length - 1) * 100,\n          cy: 100 - value,\n          r: selectedCommodity === 'all' ? '0.6' : '0.8',\n          fill: colors[commodity],\n          className: \"hover:r-2 transition-all cursor-pointer\",\n          style: {\n            opacity: selectedCommodity === 'all' ? 0.6 : 0.8\n          },\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: [getCommodityName(commodity), \": \", getTooltipValue(commodity, index)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this)\n        }, `${commodity}-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 15\n        }, this)))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute left-0 top-0 h-full flex flex-col justify-between text-xs text-gray-500 -ml-12\",\n        children: getYAxisLabels().map((label, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"transform -translate-y-2\",\n          children: label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute bottom-0 left-0 w-full flex justify-between text-xs text-gray-500 -mb-6\",\n        children: chartData.filter((_, index) => index % 5 === 0).map((item, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: item.date\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 grid grid-cols-2 md:grid-cols-5 gap-2 text-xs\",\n      children: getVisibleCommodities().map(commodity => {\n        const info = data[commodity];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center p-2 bg-gray-50 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"font-medium capitalize\",\n            children: getCommodityName(commodity)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `text-sm ${info.variation >= 0 ? 'text-green-600' : 'text-red-600'}`,\n            children: [info.variation >= 0 ? '+' : '', info.variation.toFixed(2), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xs text-gray-500 mt-1\",\n            children: [info.price.toFixed(2), \" \", info.unit]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 15\n          }, this)]\n        }, commodity, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(CommodityChart, \"V/ScFQL0if11Hl7cidgP6cqeB8g=\");\n_c = CommodityChart;\nexport default CommodityChart;\nvar _c;\n$RefreshReg$(_c, \"CommodityChart\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","generateChartData","commodities","days","dates","Array","from","length","_","i","date","Date","setDate","getDate","toLocaleDateString","month","day","chartData","map","index","dataPoint","Object","entries","forEach","commodity","info","basePrice","price","volatility","Math","max","abs","variation","trend","sineFactor","sin","PI","randomFactor","random","trendFactor","Number","toFixed","console","log","CommodityChart","data","_s","viewMode","setViewMode","selectedCommodity","setSelectedCommodity","colors","soja","milho","algodao","boi","dolar","getVisibleCommodities","keys","normalizeToPercentage","currentValue","initialValue","normalizeToScale","values","item","min","range","getChartValues","result","visibleCommodities","percentChange","chartValues","generatePath","x","y","path","firstX","firstY","currentX","currentY","prevX","controlX","controlY","prevY","getYAxisLabels","getTooltipValue","actualValue","unit","getCommodityName","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","style","backgroundColor","height","viewBox","preserveAspectRatio","x1","y1","x2","y2","stroke","strokeWidth","strokeDasharray","d","fill","strokeLinecap","strokeLinejoin","opacity","cx","cy","r","label","filter","_c","$RefreshReg$"],"sources":["/home/cadu/projeto_SPR/frontend/src/components/Dashboard/CommodityChart.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\ninterface CommodityData {\r\n  price: number;\r\n  variation: number;\r\n  unit: string;\r\n  source: string;\r\n}\r\n\r\ninterface CommodityChartProps {\r\n  data: Record<string, CommodityData>;\r\n}\r\n\r\n// Dados simulados para os últimos 30 dias\r\nconst generateChartData = (commodities: Record<string, CommodityData>) => {\r\n  const days = 30;\r\n  const dates = Array.from({ length: days }, (_, i) => {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() - (days - 1 - i));\r\n    return date.toLocaleDateString('pt-BR', { month: 'short', day: 'numeric' });\r\n  });\r\n\r\n  const chartData = dates.map((date, index) => {\r\n    const dataPoint: any = { date };\r\n    \r\n    Object.entries(commodities).forEach(([commodity, info]) => {\r\n      // Simular variação histórica mais pronunciada\r\n      const basePrice = info.price;\r\n      const volatility = Math.max(0.05, Math.abs(info.variation) * 0.2); // Mínimo 5% de volatilidade\r\n      const trend = info.variation / 100; // Tendência baseada na variação atual\r\n      \r\n      // Gerar variação senoidal para criar movimento mais visível\r\n      const sineFactor = Math.sin((index / days) * Math.PI * 2) * 0.03; // Variação senoidal de 3%\r\n      const randomFactor = (Math.random() - 0.5) * volatility;\r\n      const trendFactor = (index / days) * trend;\r\n      \r\n      const price = basePrice * (1 + trendFactor + randomFactor + sineFactor);\r\n      \r\n      dataPoint[commodity] = Number(price.toFixed(2));\r\n    });\r\n    \r\n    return dataPoint;\r\n  });\r\n\r\n  console.log('Generated chart data:', chartData); // Debug\r\n  return chartData;\r\n};\r\n\r\nconst CommodityChart: React.FC<CommodityChartProps> = ({ data }) => {\r\n  const [viewMode, setViewMode] = useState<'absolute' | 'normalized' | 'percentage'>('normalized');\r\n  const [selectedCommodity, setSelectedCommodity] = useState<string>('all');\r\n  const chartData = generateChartData(data);\r\n  \r\n  // Cores para cada commodity\r\n  const colors = {\r\n    soja: '#10B981', // Verde\r\n    milho: '#F59E0B', // Amarelo\r\n    algodao: '#EF4444', // Vermelho\r\n    boi: '#8B5CF6', // Roxo\r\n    dolar: '#3B82F6' // Azul\r\n  };\r\n\r\n  // Função para obter commodities visíveis\r\n  const getVisibleCommodities = () => {\r\n    if (selectedCommodity === 'all') {\r\n      return Object.keys(data);\r\n    }\r\n    return [selectedCommodity];\r\n  };\r\n\r\n  // Função para normalizar valores (0-100 baseado no valor inicial)\r\n  const normalizeToPercentage = (commodity: string, currentValue: number, index: number) => {\r\n    const initialValue = chartData[0][commodity];\r\n    return ((currentValue - initialValue) / initialValue) * 100;\r\n  };\r\n\r\n  // Função para normalizar valores para escala 0-100\r\n  const normalizeToScale = (commodity: string) => {\r\n    const values = chartData.map(item => item[commodity]);\r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n    const range = max - min;\r\n    \r\n    return chartData.map(item => {\r\n      if (range === 0) return 50; // Se não há variação, centraliza\r\n      return ((item[commodity] - min) / range) * 100;\r\n    });\r\n  };\r\n\r\n  // Função para obter valores baseados no modo de visualização\r\n  const getChartValues = () => {\r\n    const result: Record<string, number[]> = {};\r\n    const visibleCommodities = getVisibleCommodities();\r\n    \r\n    visibleCommodities.forEach(commodity => {\r\n      if (viewMode === 'absolute') {\r\n        // Valores absolutos - usar escala individual para cada commodity\r\n        result[commodity] = normalizeToScale(commodity);\r\n      } else if (viewMode === 'normalized') {\r\n        // Valores normalizados (0-100 baseado no min/max individual)\r\n        result[commodity] = normalizeToScale(commodity);\r\n      } else {\r\n        // Variação percentual baseada no primeiro valor\r\n        result[commodity] = chartData.map((item, index) => {\r\n          const percentChange = normalizeToPercentage(commodity, item[commodity], index);\r\n          // Converter para escala 0-100 (50 = 0% de variação)\r\n          return 50 + (percentChange * 2); // Amplifica a variação para melhor visualização\r\n        });\r\n      }\r\n    });\r\n    \r\n    return result;\r\n  };\r\n\r\n  const chartValues = getChartValues();\r\n  console.log('Chart values:', chartValues); // Debug\r\n\r\n  // Gerar pontos para cada linha com curvas suaves\r\n  const generatePath = (commodity: string) => {\r\n    const values = chartValues[commodity];\r\n    if (!values || values.length === 0) return '';\r\n    \r\n    if (values.length === 1) {\r\n      const x = 0;\r\n      const y = 100 - values[0];\r\n      return `M ${x} ${y}`;\r\n    }\r\n    \r\n    let path = '';\r\n    \r\n    // Começar o caminho\r\n    const firstX = 0;\r\n    const firstY = 100 - values[0];\r\n    path += `M ${firstX} ${firstY}`;\r\n    \r\n    // Criar curvas suaves usando curvas quadráticas Bézier\r\n    for (let i = 1; i < values.length; i++) {\r\n      const currentX = (i / (values.length - 1)) * 100;\r\n      const currentY = 100 - values[i];\r\n      \r\n      if (i === 1) {\r\n        // Primeira curva - usar controle simples\r\n        const prevX = ((i - 1) / (values.length - 1)) * 100;\r\n        const controlX = (prevX + currentX) / 2;\r\n        const controlY = 100 - values[i - 1];\r\n        path += ` Q ${controlX} ${controlY} ${currentX} ${currentY}`;\r\n      } else {\r\n        // Curvas subsequentes - usar controles mais suaves\r\n        const prevX = ((i - 1) / (values.length - 1)) * 100;\r\n        const prevY = 100 - values[i - 1];\r\n        \r\n        // Calcular ponto de controle para suavização\r\n        const controlX = prevX + (currentX - prevX) * 0.5;\r\n        const controlY = prevY + (currentY - prevY) * 0.3;\r\n        \r\n        path += ` Q ${controlX} ${controlY} ${currentX} ${currentY}`;\r\n      }\r\n    }\r\n    \r\n    return path;\r\n  };\r\n\r\n  // Função para obter label do eixo Y baseado no modo\r\n  const getYAxisLabels = () => {\r\n    if (viewMode === 'percentage') {\r\n      return ['+10%', '+5%', '0%', '-5%', '-10%'];\r\n    } else if (viewMode === 'normalized') {\r\n      return ['Máx', '75%', '50%', '25%', 'Mín'];\r\n    } else {\r\n      return ['Alto', '75%', '50%', '25%', 'Baixo'];\r\n    }\r\n  };\r\n\r\n  // Função para obter tooltip\r\n  const getTooltipValue = (commodity: string, index: number) => {\r\n    const actualValue = chartData[index][commodity];\r\n    const unit = data[commodity].unit;\r\n    \r\n    if (viewMode === 'percentage') {\r\n      const percentChange = normalizeToPercentage(commodity, actualValue, index);\r\n      return `${percentChange >= 0 ? '+' : ''}${percentChange.toFixed(2)}%`;\r\n    } else {\r\n      return `${actualValue.toFixed(2)} ${unit}`;\r\n    }\r\n  };\r\n\r\n  // Função para obter o nome formatado da commodity\r\n  const getCommodityName = (commodity: string) => {\r\n    return commodity === 'algodao' ? 'Algodão' : \r\n           commodity === 'dolar' ? 'Dólar' : commodity;\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full h-full\">\r\n      {/* Controles de Visualização */}\r\n      <div className=\"flex flex-wrap justify-between items-center mb-4 gap-4\">\r\n        <div className=\"flex flex-wrap gap-2\">\r\n          <button\r\n            onClick={() => setViewMode('normalized')}\r\n            className={`px-3 py-1 text-sm rounded-lg transition-colors ${\r\n              viewMode === 'normalized' \r\n                ? 'bg-blue-500 text-white' \r\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Normalizado\r\n          </button>\r\n          <button\r\n            onClick={() => setViewMode('percentage')}\r\n            className={`px-3 py-1 text-sm rounded-lg transition-colors ${\r\n              viewMode === 'percentage' \r\n                ? 'bg-blue-500 text-white' \r\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Variação %\r\n          </button>\r\n          <button\r\n            onClick={() => setViewMode('absolute')}\r\n            className={`px-3 py-1 text-sm rounded-lg transition-colors ${\r\n              viewMode === 'absolute' \r\n                ? 'bg-blue-500 text-white' \r\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n            }`}\r\n          >\r\n            Absoluto\r\n          </button>\r\n        </div>\r\n        \r\n        {/* Seletor de Commodity */}\r\n        <div className=\"flex items-center space-x-2\">\r\n          <label className=\"text-sm font-medium text-gray-700\">Commodity:</label>\r\n          <select\r\n            value={selectedCommodity}\r\n            onChange={(e) => setSelectedCommodity(e.target.value)}\r\n            className=\"px-3 py-1 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n          >\r\n            <option value=\"all\">Todas</option>\r\n            {Object.keys(data).map(commodity => (\r\n              <option key={commodity} value={commodity}>\r\n                {getCommodityName(commodity)}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        \r\n        {/* Legenda */}\r\n        <div className=\"flex flex-wrap gap-4\">\r\n          {getVisibleCommodities().map(commodity => (\r\n            <div key={commodity} className=\"flex items-center space-x-2\">\r\n              <div \r\n                className=\"w-3 h-3 rounded-full\"\r\n                style={{ backgroundColor: colors[commodity as keyof typeof colors] }}\r\n              />\r\n              <span className=\"text-sm text-gray-600 capitalize\">\r\n                {getCommodityName(commodity)}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Descrição do Modo */}\r\n      <div className=\"mb-4 p-3 bg-blue-50 rounded-lg\">\r\n        <p className=\"text-sm text-blue-800\">\r\n          {viewMode === 'normalized' && \r\n            'Modo Normalizado: Cada commodity é escalada individualmente de 0% a 100% baseado em seus valores mínimo e máximo.'\r\n          }\r\n          {viewMode === 'percentage' && \r\n            'Modo Variação %: Mostra a variação percentual de cada commodity em relação ao primeiro valor do período.'\r\n          }\r\n          {viewMode === 'absolute' && \r\n            'Modo Absoluto: Cada commodity é escalada individualmente para melhor visualização das tendências.'\r\n          }\r\n          {selectedCommodity !== 'all' && (\r\n            <span className=\"ml-2 font-medium\">\r\n              Visualizando apenas: {getCommodityName(selectedCommodity)}\r\n            </span>\r\n          )}\r\n        </p>\r\n      </div>\r\n\r\n      {/* Gráfico SVG */}\r\n      <div className=\"relative w-full\" style={{ height: 'calc(100% - 200px)' }}>\r\n        <svg \r\n          viewBox=\"0 0 100 100\" \r\n          className=\"w-full h-full border border-gray-200 rounded-lg bg-gray-50\"\r\n          preserveAspectRatio=\"none\"\r\n        >\r\n          {/* Grid horizontal */}\r\n          {[0, 25, 50, 75, 100].map(y => (\r\n            <line\r\n              key={y}\r\n              x1=\"0\"\r\n              y1={y}\r\n              x2=\"100\"\r\n              y2={y}\r\n              stroke=\"#E5E7EB\"\r\n              strokeWidth=\"0.2\"\r\n            />\r\n          ))}\r\n          \r\n          {/* Grid vertical */}\r\n          {Array.from({ length: 7 }, (_, i) => i * (100 / 6)).map(x => (\r\n            <line\r\n              key={x}\r\n              x1={x}\r\n              y1=\"0\"\r\n              x2={x}\r\n              y2=\"100\"\r\n              stroke=\"#E5E7EB\"\r\n              strokeWidth=\"0.2\"\r\n            />\r\n          ))}\r\n\r\n          {/* Linha de referência para modo percentual */}\r\n          {viewMode === 'percentage' && (\r\n            <line\r\n              x1=\"0\"\r\n              y1=\"50\"\r\n              x2=\"100\"\r\n              y2=\"50\"\r\n              stroke=\"#6B7280\"\r\n              strokeWidth=\"0.4\"\r\n              strokeDasharray=\"2,2\"\r\n            />\r\n          )}\r\n\r\n          {/* Linhas das commodities */}\r\n          {getVisibleCommodities().map(commodity => {\r\n            const path = generatePath(commodity);\r\n            console.log(`Path for ${commodity}:`, path); // Debug\r\n            return (\r\n              <path\r\n                key={commodity}\r\n                d={path}\r\n                fill=\"none\"\r\n                stroke={colors[commodity as keyof typeof colors]}\r\n                strokeWidth={selectedCommodity === 'all' ? '0.8' : '1.2'}\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                className=\"hover:opacity-100 transition-opacity\"\r\n                style={{ opacity: selectedCommodity === 'all' ? 0.85 : 1 }}\r\n              />\r\n            );\r\n          })}\r\n\r\n          {/* Pontos para cada commodity */}\r\n          {getVisibleCommodities().map(commodity => \r\n            chartValues[commodity].map((value, index) => (\r\n              <circle\r\n                key={`${commodity}-${index}`}\r\n                cx={(index / (chartValues[commodity].length - 1)) * 100}\r\n                cy={100 - value}\r\n                r={selectedCommodity === 'all' ? '0.6' : '0.8'}\r\n                fill={colors[commodity as keyof typeof colors]}\r\n                className=\"hover:r-2 transition-all cursor-pointer\"\r\n                style={{ opacity: selectedCommodity === 'all' ? 0.6 : 0.8 }}\r\n              >\r\n                <title>\r\n                  {getCommodityName(commodity)}: {getTooltipValue(commodity, index)}\r\n                </title>\r\n              </circle>\r\n            ))\r\n          )}\r\n        </svg>\r\n\r\n        {/* Labels do eixo Y */}\r\n        <div className=\"absolute left-0 top-0 h-full flex flex-col justify-between text-xs text-gray-500 -ml-12\">\r\n          {getYAxisLabels().map((label, index) => (\r\n            <span key={index} className=\"transform -translate-y-2\">\r\n              {label}\r\n            </span>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Labels do eixo X */}\r\n        <div className=\"absolute bottom-0 left-0 w-full flex justify-between text-xs text-gray-500 -mb-6\">\r\n          {chartData.filter((_, index) => index % 5 === 0).map((item, index) => (\r\n            <span key={index}>{item.date}</span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Resumo estatístico */}\r\n      <div className=\"mt-4 grid grid-cols-2 md:grid-cols-5 gap-2 text-xs\">\r\n        {getVisibleCommodities().map(commodity => {\r\n          const info = data[commodity];\r\n          return (\r\n            <div key={commodity} className=\"text-center p-2 bg-gray-50 rounded\">\r\n              <div className=\"font-medium capitalize\">\r\n                {getCommodityName(commodity)}\r\n              </div>\r\n              <div className={`text-sm ${info.variation >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                {info.variation >= 0 ? '+' : ''}{info.variation.toFixed(2)}%\r\n              </div>\r\n              <div className=\"text-xs text-gray-500 mt-1\">\r\n                {info.price.toFixed(2)} {info.unit}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommodityChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}