{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { config } from '../config';\n// Constantes para controle de throttling\nconst SYNC_THROTTLE_INTERVAL = 2000; // 2 segundos (reduzido de 5s)\nconst MESSAGE_DUPLICATE_THRESHOLD = 60000; // 1 minuto\nconst HISTORY_RETENTION_DAYS = 3; // 3 dias de hist√≥rico\nconst LOAD_CHATS_THROTTLE = 15000; // 15 segundos\nconst LOAD_MESSAGES_THROTTLE = 10000; // 10 segundos\n\n// Dados de exemplo\nconst createSampleData = () => {\n  const sampleContacts = [{\n    id: 'contact-1',\n    name: 'Jo√£o Silva - Produtor de Soja',\n    phone: '+55 11 99999-1111',\n    phoneNumber: '+55 11 99999-1111',\n    isOnline: true,\n    lastSeen: new Date(),\n    tags: ['Produtores de Soja', 'Clientes Premium']\n  }, {\n    id: 'contact-2',\n    name: 'Maria Santos - Cooperativa',\n    phone: '+55 11 99999-2222',\n    phoneNumber: '+55 11 99999-2222',\n    isOnline: false,\n    lastSeen: new Date(Date.now() - 2 * 60 * 60 * 1000),\n    // 2 horas atr√°s\n    tags: ['Cooperativas']\n  }, {\n    id: 'contact-3',\n    name: 'Pedro Costa - Milho',\n    phone: '+55 11 99999-3333',\n    phoneNumber: '+55 11 99999-3333',\n    isOnline: false,\n    lastSeen: new Date(Date.now() - 24 * 60 * 60 * 1000),\n    // 1 dia atr√°s\n    tags: ['Produtores de Milho']\n  }, {\n    id: 'contact-4',\n    name: 'Ana Oliveira - Algod√£o',\n    phone: '+55 11 99999-4444',\n    phoneNumber: '+55 11 99999-4444',\n    isOnline: true,\n    lastSeen: new Date(),\n    tags: ['Produtores de Algod√£o', 'Clientes Premium']\n  }, {\n    id: 'contact-5',\n    name: 'Carlos Ferreira - Corretor',\n    phone: '+55 11 99999-5555',\n    phoneNumber: '+55 11 99999-5555',\n    isOnline: false,\n    lastSeen: new Date(Date.now() - 6 * 60 * 60 * 1000),\n    // 6 horas atr√°s\n    tags: ['Corretores']\n  }];\n  const sampleMessages = {\n    'chat-1': [{\n      id: 'msg-1-1',\n      content: 'Bom dia! Como est√£o os pre√ßos da soja hoje?',\n      timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000),\n      isFromMe: false,\n      status: 'read',\n      type: 'text'\n    }, {\n      id: 'msg-1-2',\n      content: 'Bom dia, Jo√£o! Os pre√ßos est√£o em alta hoje. Soja a R$ 145,50/saca na B3. Quer receber o relat√≥rio completo?',\n      timestamp: new Date(Date.now() - 2.5 * 60 * 60 * 1000),\n      isFromMe: true,\n      status: 'read',\n      type: 'text'\n    }, {\n      id: 'msg-1-3',\n      content: 'Sim, por favor! E como est√° a previs√£o para os pr√≥ximos dias?',\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      isFromMe: false,\n      status: 'read',\n      type: 'text'\n    }, {\n      id: 'msg-1-4',\n      content: 'Nossa an√°lise indica tend√™ncia de alta para os pr√≥ximos 5 dias, com poss√≠vel valoriza√ß√£o de 3-5%. Vou enviar o relat√≥rio t√©cnico agora.',\n      timestamp: new Date(Date.now() - 1.5 * 60 * 60 * 1000),\n      isFromMe: true,\n      status: 'read',\n      type: 'text'\n    }],\n    'chat-2': [{\n      id: 'msg-2-1',\n      content: 'Boa tarde! Voc√™s t√™m an√°lise sobre o milho para esta semana?',\n      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\n      isFromMe: false,\n      status: 'read',\n      type: 'text'\n    }, {\n      id: 'msg-2-2',\n      content: 'Boa tarde, Maria! Sim, temos an√°lise completa. O milho est√° com movimento lateral, mas com potencial de alta devido √† demanda externa.',\n      timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000),\n      isFromMe: true,\n      status: 'delivered',\n      type: 'text'\n    }],\n    'chat-3': [{\n      id: 'msg-3-1',\n      content: 'Ol√°! Gostaria de saber sobre as condi√ß√µes clim√°ticas para o plantio.',\n      timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      isFromMe: false,\n      status: 'read',\n      type: 'text'\n    }, {\n      id: 'msg-3-2',\n      content: 'Ol√°, Pedro! As condi√ß√µes est√£o favor√°veis para o plantio na sua regi√£o. Chuvas previstas para os pr√≥ximos 3 dias.',\n      timestamp: new Date(Date.now() - 23 * 60 * 60 * 1000),\n      isFromMe: true,\n      status: 'read',\n      type: 'text'\n    }]\n  };\n  const sampleChats = [{\n    id: 'chat-1',\n    contact: sampleContacts[0],\n    messages: sampleMessages['chat-1'],\n    lastMessage: sampleMessages['chat-1'][sampleMessages['chat-1'].length - 1],\n    unreadCount: 0,\n    isPinned: true,\n    isArchived: false,\n    createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n  }, {\n    id: 'chat-2',\n    contact: sampleContacts[1],\n    messages: sampleMessages['chat-2'],\n    lastMessage: sampleMessages['chat-2'][sampleMessages['chat-2'].length - 1],\n    unreadCount: 1,\n    isPinned: false,\n    isArchived: false,\n    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)\n  }, {\n    id: 'chat-3',\n    contact: sampleContacts[2],\n    messages: sampleMessages['chat-3'],\n    lastMessage: sampleMessages['chat-3'][sampleMessages['chat-3'].length - 1],\n    unreadCount: 0,\n    isPinned: false,\n    isArchived: false,\n    createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)\n  }, {\n    id: 'chat-4',\n    contact: sampleContacts[3],\n    messages: [],\n    unreadCount: 0,\n    isPinned: false,\n    isArchived: false,\n    createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)\n  }, {\n    id: 'chat-5',\n    contact: sampleContacts[4],\n    messages: [],\n    unreadCount: 2,\n    isPinned: false,\n    isArchived: false,\n    createdAt: new Date(Date.now() - 12 * 60 * 60 * 1000)\n  }];\n  return {\n    sampleContacts,\n    sampleChats\n  };\n};\nexport const useWhatsAppStore = create()(persist((set, get) => {\n  const {\n    sampleContacts,\n    sampleChats\n  } = createSampleData();\n  return {\n    // Estado inicial\n    connectionStatus: 'disconnected',\n    isConnecting: false,\n    isConnected: false,\n    qrCode: null,\n    contacts: sampleContacts,\n    chats: sampleChats,\n    campaigns: [],\n    autoSendQueue: [],\n    metrics: {\n      totalContacts: sampleContacts.length,\n      activeChats: sampleChats.filter(chat => !chat.isArchived).length,\n      messagesLastHour: 12,\n      responseRate: 85.5,\n      deliveryRate: 98.2\n    },\n    // Controle de opera√ß√µes (otimiza√ß√µes)\n    _lastSyncTime: 0,\n    _operationLocks: new Set(),\n    _messageQueue: new Map(),\n    // Utilit√°rios de controle\n    _lockOperation: operation => {\n      const state = get();\n      if (state._operationLocks.has(operation)) {\n        console.log(`üîí Opera√ß√£o ${operation} j√° em andamento`);\n        return false;\n      }\n      state._operationLocks.add(operation);\n      return true;\n    },\n    _unlockOperation: operation => {\n      const state = get();\n      state._operationLocks.delete(operation);\n    },\n    _isRecentOperation: (operation, threshold = SYNC_THROTTLE_INTERVAL) => {\n      const state = get();\n      const now = Date.now();\n      return now - state._lastSyncTime < threshold;\n    },\n    // A√ß√µes\n    connectWhatsApp: async () => {\n      if (!get()._lockOperation('connect')) return;\n      set({\n        isConnecting: true,\n        connectionStatus: 'connecting'\n      });\n      try {\n        // Verificar status do servidor WhatsApp\n        const response = await fetch(`${config.whatsapp.apiUrl}/api/status`);\n        const data = await response.json();\n        if (data.whatsappConnected) {\n          set({\n            connectionStatus: 'connected',\n            isConnecting: false,\n            isConnected: true,\n            qrCode: null\n          });\n        } else {\n          // Tentar obter QR code\n          try {\n            const qrResponse = await fetch(`${config.whatsapp.apiUrl}/api/whatsapp/qr`);\n            const qrData = await qrResponse.json();\n            if (qrData.qrCode) {\n              set({\n                connectionStatus: 'connecting',\n                isConnecting: false,\n                isConnected: false,\n                qrCode: qrData.qrCode\n              });\n            } else if (qrData.connected) {\n              set({\n                connectionStatus: 'connected',\n                isConnecting: false,\n                isConnected: true,\n                qrCode: null\n              });\n            } else {\n              set({\n                connectionStatus: 'disconnected',\n                isConnecting: false,\n                isConnected: false,\n                qrCode: null\n              });\n            }\n          } catch (qrError) {\n            console.error('Erro ao obter QR code:', qrError);\n            set({\n              connectionStatus: 'error',\n              isConnecting: false,\n              isConnected: false,\n              qrCode: null\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Erro ao conectar WhatsApp:', error);\n        set({\n          connectionStatus: 'error',\n          isConnecting: false,\n          isConnected: false\n        });\n      } finally {\n        get()._unlockOperation('connect');\n      }\n    },\n    disconnectWhatsApp: () => {\n      set({\n        connectionStatus: 'disconnected',\n        isConnected: false,\n        qrCode: null\n      });\n    },\n    sendMessage: async (chatId, content) => {\n      const {\n        chats\n      } = get();\n      const chatIndex = chats.findIndex(chat => chat.id === chatId);\n      if (chatIndex === -1) return;\n\n      // Adicionar mensagem localmente primeiro\n      const newMessage = {\n        id: `msg-${Date.now()}`,\n        content,\n        timestamp: new Date(),\n        isFromMe: true,\n        status: 'sent',\n        type: 'text'\n      };\n      const updatedChats = [...chats];\n      updatedChats[chatIndex] = {\n        ...updatedChats[chatIndex],\n        messages: [...updatedChats[chatIndex].messages, newMessage],\n        lastMessage: newMessage\n      };\n      set({\n        chats: updatedChats\n      });\n\n      // Enviar atrav√©s do servidor WhatsApp real\n      try {\n        const response = await fetch(`${config.whatsapp.apiUrl}/api/whatsapp/send`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            number: chatId,\n            message: content\n          })\n        });\n        const result = await response.json();\n        if (result.success) {\n          // Marcar como entregue\n          setTimeout(() => {\n            const {\n              chats: currentChats\n            } = get();\n            const currentChatIndex = currentChats.findIndex(chat => chat.id === chatId);\n            if (currentChatIndex === -1) return;\n            const updatedChats = [...currentChats];\n            const messageIndex = updatedChats[currentChatIndex].messages.findIndex(msg => msg.id === newMessage.id);\n            if (messageIndex !== -1) {\n              updatedChats[currentChatIndex].messages[messageIndex].status = 'delivered';\n              set({\n                chats: updatedChats\n              });\n            }\n          }, 1000);\n          setTimeout(() => {\n            const {\n              chats: currentChats\n            } = get();\n            const currentChatIndex = currentChats.findIndex(chat => chat.id === chatId);\n            if (currentChatIndex === -1) return;\n            const updatedChats = [...currentChats];\n            const messageIndex = updatedChats[currentChatIndex].messages.findIndex(msg => msg.id === newMessage.id);\n            if (messageIndex !== -1) {\n              updatedChats[currentChatIndex].messages[messageIndex].status = 'read';\n              set({\n                chats: updatedChats\n              });\n            }\n          }, 3000);\n        } else {\n          throw new Error(result.error || 'Erro ao enviar mensagem');\n        }\n      } catch (error) {\n        console.error('Erro ao enviar mensagem pelo servidor:', error);\n\n        // Marcar mensagem como erro\n        const {\n          chats: currentChats\n        } = get();\n        const currentChatIndex = currentChats.findIndex(chat => chat.id === chatId);\n        if (currentChatIndex !== -1) {\n          const updatedChats = [...currentChats];\n          const messageIndex = updatedChats[currentChatIndex].messages.findIndex(msg => msg.id === newMessage.id);\n          if (messageIndex !== -1) {\n            updatedChats[currentChatIndex].messages[messageIndex].content += ' ‚ùå (Erro ao enviar)';\n            set({\n              chats: updatedChats\n            });\n          }\n        }\n        throw error;\n      }\n    },\n    addMessage: (chatId, message) => {\n      const {\n        chats\n      } = get();\n      const chatIndex = chats.findIndex(chat => chat.id === chatId);\n      if (chatIndex === -1) return;\n      const updatedChats = [...chats];\n      const currentChat = updatedChats[chatIndex];\n\n      // Verificar se a mensagem j√° existe para evitar duplicatas\n      const messageExists = currentChat.messages.some(existingMsg => existingMsg.id === message.id || existingMsg.content === message.content && Math.abs(existingMsg.timestamp.getTime() - message.timestamp.getTime()) < MESSAGE_DUPLICATE_THRESHOLD);\n      if (!messageExists) {\n        // Adicionar nova mensagem ao final da lista\n        const updatedMessages = [...currentChat.messages, message];\n\n        // Ordenar por timestamp para garantir ordem correta\n        const sortedMessages = updatedMessages.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n        updatedChats[chatIndex] = {\n          ...currentChat,\n          messages: sortedMessages,\n          lastMessage: message\n        };\n        set({\n          chats: updatedChats\n        });\n        console.log(`‚úÖ Mensagem adicionada ao chat ${chatId}: ${message.content.substring(0, 50)}...`);\n      } else {\n        console.log(`‚ö†Ô∏è Mensagem j√° existe no chat ${chatId}, ignorando duplicata`);\n      }\n    },\n    createCampaign: campaign => {\n      const {\n        campaigns\n      } = get();\n      set({\n        campaigns: [...campaigns, campaign]\n      });\n    },\n    scheduleMessage: (contactId, message, scheduledTime) => {\n      const {\n        autoSendQueue\n      } = get();\n      const newQueueItem = {\n        id: `queue-${Date.now()}`,\n        campaignId: `campaign-${Date.now()}`,\n        contactId,\n        message,\n        scheduledTime,\n        status: 'pending',\n        attempts: 0\n      };\n      set({\n        autoSendQueue: [...autoSendQueue, newQueueItem]\n      });\n    },\n    updateChat: (chatId, updates) => {\n      const {\n        chats\n      } = get();\n      const updatedChats = chats.map(chat => chat.id === chatId ? {\n        ...chat,\n        ...updates\n      } : chat);\n      set({\n        chats: updatedChats\n      });\n    },\n    addContact: contact => {\n      const {\n        contacts\n      } = get();\n      set({\n        contacts: [...contacts, contact]\n      });\n    },\n    removeContact: contactId => {\n      const {\n        contacts,\n        chats\n      } = get();\n      const updatedContacts = contacts.filter(contact => contact.id !== contactId);\n      const updatedChats = chats.filter(chat => chat.contact.id !== contactId);\n      set({\n        contacts: updatedContacts,\n        chats: updatedChats\n      });\n    },\n    markAsRead: chatId => {\n      var _updatedChats$find;\n      const {\n        chats\n      } = get();\n      const updatedChats = chats.map(chat => {\n        if (chat.id === chatId) {\n          // Marcar todas as mensagens como lidas\n          const updatedMessages = chat.messages.map(message => ({\n            ...message,\n            status: message.isFromMe ? message.status : 'read'\n          }));\n          return {\n            ...chat,\n            messages: updatedMessages,\n            unreadCount: 0,\n            // Zerar contador de n√£o lidas\n            lastMessage: updatedMessages.length > 0 ? updatedMessages[updatedMessages.length - 1] : chat.lastMessage\n          };\n        }\n        return chat;\n      });\n      set({\n        chats: updatedChats\n      });\n      console.log(`üìñ Chat ${chatId} marcado como lido (${((_updatedChats$find = updatedChats.find(c => c.id === chatId)) === null || _updatedChats$find === void 0 ? void 0 : _updatedChats$find.messages.length) || 0} mensagens)`);\n    },\n    markMessageAsRead: (chatId, messageId) => {\n      const {\n        chats\n      } = get();\n      const updatedChats = chats.map(chat => {\n        if (chat.id === chatId) {\n          const updatedMessages = chat.messages.map(message => message.id === messageId && !message.isFromMe ? {\n            ...message,\n            status: 'read'\n          } : message);\n\n          // Recalcular contador de n√£o lidas\n          const unreadCount = updatedMessages.filter(msg => !msg.isFromMe && msg.status !== 'read').length;\n          return {\n            ...chat,\n            messages: updatedMessages,\n            unreadCount,\n            lastMessage: updatedMessages.length > 0 ? updatedMessages[updatedMessages.length - 1] : chat.lastMessage\n          };\n        }\n        return chat;\n      });\n      set({\n        chats: updatedChats\n      });\n    },\n    archiveChat: chatId => {\n      const {\n        chats\n      } = get();\n      const updatedChats = chats.map(chat => chat.id === chatId ? {\n        ...chat,\n        isArchived: !chat.isArchived\n      } : chat);\n      set({\n        chats: updatedChats\n      });\n    },\n    pinChat: chatId => {\n      const {\n        chats\n      } = get();\n      const updatedChats = chats.map(chat => chat.id === chatId ? {\n        ...chat,\n        isPinned: !chat.isPinned\n      } : chat);\n      set({\n        chats: updatedChats\n      });\n    },\n    // Novos m√©todos para integra√ß√£o real (OTIMIZADOS)\n    loadChatsFromServer: serverChats => {\n      if (get()._isRecentOperation('loadChats', LOAD_CHATS_THROTTLE)) {\n        console.log('‚ö†Ô∏è Sincroniza√ß√£o de chats muito recente, pulando...');\n        return;\n      }\n      const {\n        chats: existingChats\n      } = get();\n\n      // Mesclar chats do servidor com chats existentes, preservando mensagens\n      const mergedChats = serverChats.map(serverChat => {\n        const existingChat = existingChats.find(chat => chat.id === serverChat.id);\n        if (existingChat) {\n          // Preservar mensagens existentes e atualizar outras propriedades\n          return {\n            ...serverChat,\n            messages: existingChat.messages || [],\n            // PRESERVAR mensagens existentes\n            lastMessage: existingChat.lastMessage || serverChat.lastMessage,\n            unreadCount: serverChat.unreadCount || existingChat.unreadCount || 0\n          };\n        } else {\n          // Novo chat, usar dados do servidor\n          return {\n            ...serverChat,\n            messages: [],\n            // Inicializar sem mensagens\n            lastMessage: serverChat.lastMessage,\n            unreadCount: serverChat.unreadCount || 0\n          };\n        }\n      });\n      set({\n        chats: mergedChats\n      });\n      set(state => ({\n        _lastSyncTime: Date.now()\n      }));\n      console.log(`‚úÖ ${mergedChats.length} chats carregados do servidor (mensagens preservadas)`);\n    },\n    loadMessagesForChat: (chatId, messages) => {\n      var _updatedChats$find2;\n      const {\n        chats\n      } = get();\n      const updatedChats = chats.map(chat => {\n        if (chat.id === chatId) {\n          // Preservar mensagens existentes e adicionar novas\n          const existingMessages = chat.messages || [];\n          const newMessages = messages || [];\n\n          // Calcular data limite (3 dias atr√°s)\n          const retentionDate = new Date();\n          retentionDate.setDate(retentionDate.getDate() - HISTORY_RETENTION_DAYS);\n\n          // Filtrar mensagens existentes para manter apenas as dos √∫ltimos 3 dias\n          const recentExistingMessages = existingMessages.filter(msg => msg.timestamp.getTime() >= retentionDate.getTime());\n\n          // Combinar mensagens existentes com novas, evitando duplicatas\n          const combinedMessages = [...recentExistingMessages];\n\n          // Adicionar apenas mensagens que n√£o existem\n          newMessages.forEach(newMsg => {\n            const exists = combinedMessages.some(existingMsg => existingMsg.id === newMsg.id || existingMsg.content === newMsg.content && Math.abs(existingMsg.timestamp.getTime() - newMsg.timestamp.getTime()) < MESSAGE_DUPLICATE_THRESHOLD);\n            if (!exists) {\n              combinedMessages.push(newMsg);\n            }\n          });\n\n          // Ordenar por timestamp (mais antiga primeiro)\n          const sortedMessages = combinedMessages.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n\n          // Log detalhado para debug\n          console.log(`üìä Chat ${chatId}:`);\n          console.log(`   - Mensagens existentes: ${existingMessages.length}`);\n          console.log(`   - Mensagens recentes (${HISTORY_RETENTION_DAYS} dias): ${recentExistingMessages.length}`);\n          console.log(`   - Novas mensagens: ${newMessages.length}`);\n          console.log(`   - Total ap√≥s combina√ß√£o: ${sortedMessages.length}`);\n          return {\n            ...chat,\n            messages: sortedMessages,\n            lastMessage: sortedMessages.length > 0 ? sortedMessages[sortedMessages.length - 1] : chat.lastMessage\n          };\n        }\n        return chat;\n      });\n      set({\n        chats: updatedChats\n      });\n      set(state => ({\n        _lastSyncTime: Date.now()\n      }));\n      console.log(`‚úÖ Chat ${chatId} atualizado com ${messages.length} mensagens (total: ${((_updatedChats$find2 = updatedChats.find(c => c.id === chatId)) === null || _updatedChats$find2 === void 0 ? void 0 : _updatedChats$find2.messages.length) || 0})`);\n    },\n    updateConnectionStatus: status => {\n      set({\n        connectionStatus: status\n      });\n    },\n    setQrCode: qrCode => {\n      set({\n        qrCode\n      });\n    }\n  };\n}, {\n  name: 'whatsapp-store',\n  partialize: state => ({\n    contacts: state.contacts,\n    chats: state.chats,\n    campaigns: state.campaigns\n  })\n}));","map":{"version":3,"names":["create","persist","config","SYNC_THROTTLE_INTERVAL","MESSAGE_DUPLICATE_THRESHOLD","HISTORY_RETENTION_DAYS","LOAD_CHATS_THROTTLE","LOAD_MESSAGES_THROTTLE","createSampleData","sampleContacts","id","name","phone","phoneNumber","isOnline","lastSeen","Date","tags","now","sampleMessages","content","timestamp","isFromMe","status","type","sampleChats","contact","messages","lastMessage","length","unreadCount","isPinned","isArchived","createdAt","useWhatsAppStore","set","get","connectionStatus","isConnecting","isConnected","qrCode","contacts","chats","campaigns","autoSendQueue","metrics","totalContacts","activeChats","filter","chat","messagesLastHour","responseRate","deliveryRate","_lastSyncTime","_operationLocks","Set","_messageQueue","Map","_lockOperation","operation","state","has","console","log","add","_unlockOperation","delete","_isRecentOperation","threshold","connectWhatsApp","response","fetch","whatsapp","apiUrl","data","json","whatsappConnected","qrResponse","qrData","connected","qrError","error","disconnectWhatsApp","sendMessage","chatId","chatIndex","findIndex","newMessage","updatedChats","method","headers","body","JSON","stringify","number","message","result","success","setTimeout","currentChats","currentChatIndex","messageIndex","msg","Error","addMessage","currentChat","messageExists","some","existingMsg","Math","abs","getTime","updatedMessages","sortedMessages","sort","a","b","substring","createCampaign","campaign","scheduleMessage","contactId","scheduledTime","newQueueItem","campaignId","attempts","updateChat","updates","map","addContact","removeContact","updatedContacts","markAsRead","_updatedChats$find","find","c","markMessageAsRead","messageId","archiveChat","pinChat","loadChatsFromServer","serverChats","existingChats","mergedChats","serverChat","existingChat","loadMessagesForChat","_updatedChats$find2","existingMessages","newMessages","retentionDate","setDate","getDate","recentExistingMessages","combinedMessages","forEach","newMsg","exists","push","updateConnectionStatus","setQrCode","partialize"],"sources":["/home/cadu/projeto_SPR/frontend/src/store/useWhatsAppStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\nimport { config } from '../config';\r\nimport { \r\n  WhatsAppMessage, \r\n  WhatsAppContact, \r\n  WhatsAppChat, \r\n  ConnectionStatus \r\n} from '../types';\r\n\r\nexport interface CampaignMessage {\r\n  id: string;\r\n  content: string;\r\n  tone: 'formal' | 'normal' | 'informal' | 'alegre';\r\n  scheduledTime?: Date;\r\n  targetGroups: string[];\r\n  status: 'draft' | 'scheduled' | 'sending' | 'sent' | 'completed';\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface AutoSendQueue {\r\n  id: string;\r\n  campaignId: string;\r\n  contactId: string;\r\n  message: string;\r\n  scheduledTime: Date;\r\n  status: 'pending' | 'sending' | 'sent' | 'failed' | 'cancelled';\r\n  attempts: number;\r\n  lastAttempt?: Date;\r\n  error?: string;\r\n}\r\n\r\nexport interface DashboardMetrics {\r\n  totalContacts: number;\r\n  activeChats: number;\r\n  messagesLastHour: number;\r\n  responseRate: number;\r\n  deliveryRate: number;\r\n}\r\n\r\ninterface WhatsAppStore {\r\n  // Estado de conex√£o\r\n  connectionStatus: ConnectionStatus;\r\n  isConnecting: boolean;\r\n  isConnected: boolean;\r\n  qrCode: string | null;\r\n  \r\n  // Dados\r\n  contacts: WhatsAppContact[];\r\n  chats: WhatsAppChat[];\r\n  campaigns: CampaignMessage[];\r\n  autoSendQueue: AutoSendQueue[];\r\n  \r\n  // M√©tricas\r\n  metrics: DashboardMetrics;\r\n  \r\n  // Controle de opera√ß√µes (otimiza√ß√µes)\r\n  _lastSyncTime: number;\r\n  _operationLocks: Set<string>;\r\n  _messageQueue: Map<string, Date>;\r\n  \r\n  // A√ß√µes\r\n  connectWhatsApp: () => Promise<void>;\r\n  disconnectWhatsApp: () => void;\r\n  sendMessage: (chatId: string, content: string) => Promise<void>;\r\n  addMessage: (chatId: string, message: WhatsAppMessage) => void;\r\n  createCampaign: (message: CampaignMessage) => void;\r\n  scheduleMessage: (contactId: string, message: string, scheduledTime: Date) => void;\r\n  updateChat: (chatId: string, updates: Partial<WhatsAppChat>) => void;\r\n  addContact: (contact: WhatsAppContact) => void;\r\n  removeContact: (contactId: string) => void;\r\n  markAsRead: (chatId: string) => void;\r\n  markMessageAsRead: (chatId: string, messageId: string) => void;\r\n  archiveChat: (chatId: string) => void;\r\n  pinChat: (chatId: string) => void;\r\n  \r\n  // M√©todos para integra√ß√£o real\r\n  loadChatsFromServer: (serverChats: any[]) => void;\r\n  loadMessagesForChat: (chatId: string, messages: WhatsAppMessage[]) => void;\r\n  updateConnectionStatus: (status: ConnectionStatus) => void;\r\n  setQrCode: (qrCode: string | null) => void;\r\n  \r\n  // Utilit√°rios de controle\r\n  _lockOperation: (operation: string) => boolean;\r\n  _unlockOperation: (operation: string) => void;\r\n  _isRecentOperation: (operation: string, threshold?: number) => boolean;\r\n}\r\n\r\n// Constantes para controle de throttling\r\nconst SYNC_THROTTLE_INTERVAL = 2000; // 2 segundos (reduzido de 5s)\r\nconst MESSAGE_DUPLICATE_THRESHOLD = 60000; // 1 minuto\r\nconst HISTORY_RETENTION_DAYS = 3; // 3 dias de hist√≥rico\r\nconst LOAD_CHATS_THROTTLE = 15000; // 15 segundos\r\nconst LOAD_MESSAGES_THROTTLE = 10000; // 10 segundos\r\n\r\n// Dados de exemplo\r\nconst createSampleData = () => {\r\n  const sampleContacts: WhatsAppContact[] = [\r\n    {\r\n      id: 'contact-1',\r\n      name: 'Jo√£o Silva - Produtor de Soja',\r\n      phone: '+55 11 99999-1111',\r\n      phoneNumber: '+55 11 99999-1111',\r\n      isOnline: true,\r\n      lastSeen: new Date(),\r\n      tags: ['Produtores de Soja', 'Clientes Premium']\r\n    },\r\n    {\r\n      id: 'contact-2',\r\n      name: 'Maria Santos - Cooperativa',\r\n      phone: '+55 11 99999-2222',\r\n      phoneNumber: '+55 11 99999-2222',\r\n      isOnline: false,\r\n      lastSeen: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 horas atr√°s\r\n      tags: ['Cooperativas']\r\n    },\r\n    {\r\n      id: 'contact-3',\r\n      name: 'Pedro Costa - Milho',\r\n      phone: '+55 11 99999-3333',\r\n      phoneNumber: '+55 11 99999-3333',\r\n      isOnline: false,\r\n      lastSeen: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 dia atr√°s\r\n      tags: ['Produtores de Milho']\r\n    },\r\n    {\r\n      id: 'contact-4',\r\n      name: 'Ana Oliveira - Algod√£o',\r\n      phone: '+55 11 99999-4444',\r\n      phoneNumber: '+55 11 99999-4444',\r\n      isOnline: true,\r\n      lastSeen: new Date(),\r\n      tags: ['Produtores de Algod√£o', 'Clientes Premium']\r\n    },\r\n    {\r\n      id: 'contact-5',\r\n      name: 'Carlos Ferreira - Corretor',\r\n      phone: '+55 11 99999-5555',\r\n      phoneNumber: '+55 11 99999-5555',\r\n      isOnline: false,\r\n      lastSeen: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 horas atr√°s\r\n      tags: ['Corretores']\r\n    }\r\n  ];\r\n\r\n  const sampleMessages: { [chatId: string]: WhatsAppMessage[] } = {\r\n    'chat-1': [\r\n      {\r\n        id: 'msg-1-1',\r\n        content: 'Bom dia! Como est√£o os pre√ßos da soja hoje?',\r\n        timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000),\r\n        isFromMe: false,\r\n        status: 'read',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-1-2',\r\n        content: 'Bom dia, Jo√£o! Os pre√ßos est√£o em alta hoje. Soja a R$ 145,50/saca na B3. Quer receber o relat√≥rio completo?',\r\n        timestamp: new Date(Date.now() - 2.5 * 60 * 60 * 1000),\r\n        isFromMe: true,\r\n        status: 'read',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-1-3',\r\n        content: 'Sim, por favor! E como est√° a previs√£o para os pr√≥ximos dias?',\r\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\r\n        isFromMe: false,\r\n        status: 'read',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-1-4',\r\n        content: 'Nossa an√°lise indica tend√™ncia de alta para os pr√≥ximos 5 dias, com poss√≠vel valoriza√ß√£o de 3-5%. Vou enviar o relat√≥rio t√©cnico agora.',\r\n        timestamp: new Date(Date.now() - 1.5 * 60 * 60 * 1000),\r\n        isFromMe: true,\r\n        status: 'read',\r\n        type: 'text'\r\n      }\r\n    ],\r\n    'chat-2': [\r\n      {\r\n        id: 'msg-2-1',\r\n        content: 'Boa tarde! Voc√™s t√™m an√°lise sobre o milho para esta semana?',\r\n        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\r\n        isFromMe: false,\r\n        status: 'read',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-2-2',\r\n        content: 'Boa tarde, Maria! Sim, temos an√°lise completa. O milho est√° com movimento lateral, mas com potencial de alta devido √† demanda externa.',\r\n        timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000),\r\n        isFromMe: true,\r\n        status: 'delivered',\r\n        type: 'text'\r\n      }\r\n    ],\r\n    'chat-3': [\r\n      {\r\n        id: 'msg-3-1',\r\n        content: 'Ol√°! Gostaria de saber sobre as condi√ß√µes clim√°ticas para o plantio.',\r\n        timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000),\r\n        isFromMe: false,\r\n        status: 'read',\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 'msg-3-2',\r\n        content: 'Ol√°, Pedro! As condi√ß√µes est√£o favor√°veis para o plantio na sua regi√£o. Chuvas previstas para os pr√≥ximos 3 dias.',\r\n        timestamp: new Date(Date.now() - 23 * 60 * 60 * 1000),\r\n        isFromMe: true,\r\n        status: 'read',\r\n        type: 'text'\r\n      }\r\n    ]\r\n  };\r\n\r\n  const sampleChats: WhatsAppChat[] = [\r\n    {\r\n      id: 'chat-1',\r\n      contact: sampleContacts[0],\r\n      messages: sampleMessages['chat-1'],\r\n      lastMessage: sampleMessages['chat-1'][sampleMessages['chat-1'].length - 1],\r\n      unreadCount: 0,\r\n      isPinned: true,\r\n      isArchived: false,\r\n      createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\r\n    },\r\n    {\r\n      id: 'chat-2',\r\n      contact: sampleContacts[1],\r\n      messages: sampleMessages['chat-2'],\r\n      lastMessage: sampleMessages['chat-2'][sampleMessages['chat-2'].length - 1],\r\n      unreadCount: 1,\r\n      isPinned: false,\r\n      isArchived: false,\r\n      createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)\r\n    },\r\n    {\r\n      id: 'chat-3',\r\n      contact: sampleContacts[2],\r\n      messages: sampleMessages['chat-3'],\r\n      lastMessage: sampleMessages['chat-3'][sampleMessages['chat-3'].length - 1],\r\n      unreadCount: 0,\r\n      isPinned: false,\r\n      isArchived: false,\r\n      createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)\r\n    },\r\n    {\r\n      id: 'chat-4',\r\n      contact: sampleContacts[3],\r\n      messages: [],\r\n      unreadCount: 0,\r\n      isPinned: false,\r\n      isArchived: false,\r\n      createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)\r\n    },\r\n    {\r\n      id: 'chat-5',\r\n      contact: sampleContacts[4],\r\n      messages: [],\r\n      unreadCount: 2,\r\n      isPinned: false,\r\n      isArchived: false,\r\n      createdAt: new Date(Date.now() - 12 * 60 * 60 * 1000)\r\n    }\r\n  ];\r\n\r\n  return { sampleContacts, sampleChats };\r\n};\r\n\r\nexport const useWhatsAppStore = create<WhatsAppStore>()(\r\n  persist(\r\n    (set, get) => {\r\n      const { sampleContacts, sampleChats } = createSampleData();\r\n      \r\n      return {\r\n        // Estado inicial\r\n        connectionStatus: 'disconnected',\r\n        isConnecting: false,\r\n        isConnected: false,\r\n        qrCode: null,\r\n        contacts: sampleContacts,\r\n        chats: sampleChats,\r\n        campaigns: [],\r\n        autoSendQueue: [],\r\n        metrics: {\r\n          totalContacts: sampleContacts.length,\r\n          activeChats: sampleChats.filter(chat => !chat.isArchived).length,\r\n          messagesLastHour: 12,\r\n          responseRate: 85.5,\r\n          deliveryRate: 98.2\r\n        },\r\n\r\n        // Controle de opera√ß√µes (otimiza√ß√µes)\r\n        _lastSyncTime: 0,\r\n        _operationLocks: new Set(),\r\n        _messageQueue: new Map(),\r\n\r\n        // Utilit√°rios de controle\r\n        _lockOperation: (operation: string) => {\r\n          const state = get();\r\n          if (state._operationLocks.has(operation)) {\r\n            console.log(`üîí Opera√ß√£o ${operation} j√° em andamento`);\r\n            return false;\r\n          }\r\n          state._operationLocks.add(operation);\r\n          return true;\r\n        },\r\n\r\n        _unlockOperation: (operation: string) => {\r\n          const state = get();\r\n          state._operationLocks.delete(operation);\r\n        },\r\n\r\n        _isRecentOperation: (operation: string, threshold = SYNC_THROTTLE_INTERVAL) => {\r\n          const state = get();\r\n          const now = Date.now();\r\n          return (now - state._lastSyncTime) < threshold;\r\n        },\r\n\r\n        // A√ß√µes\r\n        connectWhatsApp: async () => {\r\n          if (!get()._lockOperation('connect')) return;\r\n          \r\n          set({ isConnecting: true, connectionStatus: 'connecting' });\r\n          \r\n          try {\r\n            // Verificar status do servidor WhatsApp\r\n            const response = await fetch(`${config.whatsapp.apiUrl}/api/status`);\r\n            const data = await response.json();\r\n            \r\n            if (data.whatsappConnected) {\r\n              set({ \r\n                connectionStatus: 'connected', \r\n                isConnecting: false,\r\n                isConnected: true,\r\n                qrCode: null \r\n              });\r\n            } else {\r\n              // Tentar obter QR code\r\n              try {\r\n                const qrResponse = await fetch(`${config.whatsapp.apiUrl}/api/whatsapp/qr`);\r\n                const qrData = await qrResponse.json();\r\n                \r\n                if (qrData.qrCode) {\r\n                  set({ \r\n                    connectionStatus: 'connecting',\r\n                    isConnecting: false,\r\n                    isConnected: false,\r\n                    qrCode: qrData.qrCode \r\n                  });\r\n                } else if (qrData.connected) {\r\n                  set({ \r\n                    connectionStatus: 'connected', \r\n                    isConnecting: false,\r\n                    isConnected: true,\r\n                    qrCode: null \r\n                  });\r\n                } else {\r\n                  set({ \r\n                    connectionStatus: 'disconnected',\r\n                    isConnecting: false,\r\n                    isConnected: false,\r\n                    qrCode: null \r\n                  });\r\n                }\r\n              } catch (qrError) {\r\n                console.error('Erro ao obter QR code:', qrError);\r\n                set({ \r\n                  connectionStatus: 'error',\r\n                  isConnecting: false,\r\n                  isConnected: false,\r\n                  qrCode: null \r\n                });\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error('Erro ao conectar WhatsApp:', error);\r\n            set({ \r\n              connectionStatus: 'error', \r\n              isConnecting: false,\r\n              isConnected: false\r\n            });\r\n          } finally {\r\n            get()._unlockOperation('connect');\r\n          }\r\n        },\r\n\r\n        disconnectWhatsApp: () => {\r\n          set({ \r\n            connectionStatus: 'disconnected',\r\n            isConnected: false,\r\n            qrCode: null \r\n          });\r\n        },\r\n\r\n        sendMessage: async (chatId: string, content: string) => {\r\n          const { chats } = get();\r\n          const chatIndex = chats.findIndex(chat => chat.id === chatId);\r\n          \r\n          if (chatIndex === -1) return;\r\n\r\n          // Adicionar mensagem localmente primeiro\r\n          const newMessage: WhatsAppMessage = {\r\n            id: `msg-${Date.now()}`,\r\n            content,\r\n            timestamp: new Date(),\r\n            isFromMe: true,\r\n            status: 'sent',\r\n            type: 'text'\r\n          };\r\n\r\n          const updatedChats = [...chats];\r\n          updatedChats[chatIndex] = {\r\n            ...updatedChats[chatIndex],\r\n            messages: [...updatedChats[chatIndex].messages, newMessage],\r\n            lastMessage: newMessage\r\n          };\r\n\r\n          set({ chats: updatedChats });\r\n\r\n          // Enviar atrav√©s do servidor WhatsApp real\r\n          try {\r\n            const response = await fetch(`${config.whatsapp.apiUrl}/api/whatsapp/send`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({\r\n                number: chatId,\r\n                message: content\r\n              })\r\n            });\r\n\r\n            const result = await response.json();\r\n            \r\n            if (result.success) {\r\n              // Marcar como entregue\r\n              setTimeout(() => {\r\n                const { chats: currentChats } = get();\r\n                const currentChatIndex = currentChats.findIndex(chat => chat.id === chatId);\r\n                if (currentChatIndex === -1) return;\r\n\r\n                const updatedChats = [...currentChats];\r\n                const messageIndex = updatedChats[currentChatIndex].messages.findIndex(\r\n                  msg => msg.id === newMessage.id\r\n                );\r\n                \r\n                if (messageIndex !== -1) {\r\n                  updatedChats[currentChatIndex].messages[messageIndex].status = 'delivered';\r\n                  set({ chats: updatedChats });\r\n                }\r\n              }, 1000);\r\n\r\n              setTimeout(() => {\r\n                const { chats: currentChats } = get();\r\n                const currentChatIndex = currentChats.findIndex(chat => chat.id === chatId);\r\n                if (currentChatIndex === -1) return;\r\n\r\n                const updatedChats = [...currentChats];\r\n                const messageIndex = updatedChats[currentChatIndex].messages.findIndex(\r\n                  msg => msg.id === newMessage.id\r\n                );\r\n                \r\n                if (messageIndex !== -1) {\r\n                  updatedChats[currentChatIndex].messages[messageIndex].status = 'read';\r\n                  set({ chats: updatedChats });\r\n                }\r\n              }, 3000);\r\n            } else {\r\n              throw new Error(result.error || 'Erro ao enviar mensagem');\r\n            }\r\n          } catch (error) {\r\n            console.error('Erro ao enviar mensagem pelo servidor:', error);\r\n            \r\n            // Marcar mensagem como erro\r\n            const { chats: currentChats } = get();\r\n            const currentChatIndex = currentChats.findIndex(chat => chat.id === chatId);\r\n            if (currentChatIndex !== -1) {\r\n              const updatedChats = [...currentChats];\r\n              const messageIndex = updatedChats[currentChatIndex].messages.findIndex(\r\n                msg => msg.id === newMessage.id\r\n              );\r\n              \r\n              if (messageIndex !== -1) {\r\n                updatedChats[currentChatIndex].messages[messageIndex].content += ' ‚ùå (Erro ao enviar)';\r\n                set({ chats: updatedChats });\r\n              }\r\n            }\r\n            \r\n            throw error;\r\n          }\r\n        },\r\n\r\n        addMessage: (chatId: string, message: WhatsAppMessage) => {\r\n          const { chats } = get();\r\n          const chatIndex = chats.findIndex(chat => chat.id === chatId);\r\n          \r\n          if (chatIndex === -1) return;\r\n\r\n          const updatedChats = [...chats];\r\n          const currentChat = updatedChats[chatIndex];\r\n          \r\n          // Verificar se a mensagem j√° existe para evitar duplicatas\r\n          const messageExists = currentChat.messages.some(existingMsg => \r\n            existingMsg.id === message.id || \r\n            (existingMsg.content === message.content && \r\n             Math.abs(existingMsg.timestamp.getTime() - message.timestamp.getTime()) < MESSAGE_DUPLICATE_THRESHOLD)\r\n          );\r\n          \r\n          if (!messageExists) {\r\n            // Adicionar nova mensagem ao final da lista\r\n            const updatedMessages = [...currentChat.messages, message];\r\n            \r\n            // Ordenar por timestamp para garantir ordem correta\r\n            const sortedMessages = updatedMessages.sort((a, b) => \r\n              a.timestamp.getTime() - b.timestamp.getTime()\r\n            );\r\n            \r\n            updatedChats[chatIndex] = {\r\n              ...currentChat,\r\n              messages: sortedMessages,\r\n              lastMessage: message\r\n            };\r\n\r\n            set({ chats: updatedChats });\r\n            console.log(`‚úÖ Mensagem adicionada ao chat ${chatId}: ${message.content.substring(0, 50)}...`);\r\n          } else {\r\n            console.log(`‚ö†Ô∏è Mensagem j√° existe no chat ${chatId}, ignorando duplicata`);\r\n          }\r\n        },\r\n\r\n        createCampaign: (campaign: CampaignMessage) => {\r\n          const { campaigns } = get();\r\n          set({ campaigns: [...campaigns, campaign] });\r\n        },\r\n\r\n        scheduleMessage: (contactId: string, message: string, scheduledTime: Date) => {\r\n          const { autoSendQueue } = get();\r\n          const newQueueItem: AutoSendQueue = {\r\n            id: `queue-${Date.now()}`,\r\n            campaignId: `campaign-${Date.now()}`,\r\n            contactId,\r\n            message,\r\n            scheduledTime,\r\n            status: 'pending',\r\n            attempts: 0\r\n          };\r\n          \r\n          set({ autoSendQueue: [...autoSendQueue, newQueueItem] });\r\n        },\r\n\r\n        updateChat: (chatId: string, updates: Partial<WhatsAppChat>) => {\r\n          const { chats } = get();\r\n          const updatedChats = chats.map(chat =>\r\n            chat.id === chatId ? { ...chat, ...updates } : chat\r\n          );\r\n          set({ chats: updatedChats });\r\n        },\r\n\r\n        addContact: (contact: WhatsAppContact) => {\r\n          const { contacts } = get();\r\n          set({ contacts: [...contacts, contact] });\r\n        },\r\n\r\n        removeContact: (contactId: string) => {\r\n          const { contacts, chats } = get();\r\n          const updatedContacts = contacts.filter(contact => contact.id !== contactId);\r\n          const updatedChats = chats.filter(chat => chat.contact.id !== contactId);\r\n          set({ contacts: updatedContacts, chats: updatedChats });\r\n        },\r\n\r\n        markAsRead: (chatId: string) => {\r\n          const { chats } = get();\r\n          const updatedChats = chats.map(chat => {\r\n            if (chat.id === chatId) {\r\n              // Marcar todas as mensagens como lidas\r\n              const updatedMessages = chat.messages.map(message => ({\r\n                ...message,\r\n                status: message.isFromMe ? message.status : 'read'\r\n              }));\r\n              \r\n              return {\r\n                ...chat,\r\n                messages: updatedMessages,\r\n                unreadCount: 0, // Zerar contador de n√£o lidas\r\n                lastMessage: updatedMessages.length > 0 ? updatedMessages[updatedMessages.length - 1] : chat.lastMessage\r\n              };\r\n            }\r\n            return chat;\r\n          });\r\n          set({ chats: updatedChats });\r\n          console.log(`üìñ Chat ${chatId} marcado como lido (${updatedChats.find(c => c.id === chatId)?.messages.length || 0} mensagens)`);\r\n        },\r\n\r\n        markMessageAsRead: (chatId: string, messageId: string) => {\r\n          const { chats } = get();\r\n          const updatedChats = chats.map(chat => {\r\n            if (chat.id === chatId) {\r\n              const updatedMessages = chat.messages.map(message => \r\n                message.id === messageId && !message.isFromMe \r\n                  ? { ...message, status: 'read' as const }\r\n                  : message\r\n              );\r\n              \r\n              // Recalcular contador de n√£o lidas\r\n              const unreadCount = updatedMessages.filter(msg => !msg.isFromMe && msg.status !== 'read').length;\r\n              \r\n              return {\r\n                ...chat,\r\n                messages: updatedMessages,\r\n                unreadCount,\r\n                lastMessage: updatedMessages.length > 0 ? updatedMessages[updatedMessages.length - 1] : chat.lastMessage\r\n              };\r\n            }\r\n            return chat;\r\n          });\r\n          set({ chats: updatedChats });\r\n        },\r\n\r\n        archiveChat: (chatId: string) => {\r\n          const { chats } = get();\r\n          const updatedChats = chats.map(chat =>\r\n            chat.id === chatId ? { ...chat, isArchived: !chat.isArchived } : chat\r\n          );\r\n          set({ chats: updatedChats });\r\n        },\r\n\r\n        pinChat: (chatId: string) => {\r\n          const { chats } = get();\r\n          const updatedChats = chats.map(chat =>\r\n            chat.id === chatId ? { ...chat, isPinned: !chat.isPinned } : chat\r\n          );\r\n          set({ chats: updatedChats });\r\n        },\r\n\r\n        // Novos m√©todos para integra√ß√£o real (OTIMIZADOS)\r\n        loadChatsFromServer: (serverChats: any[]) => {\r\n          if (get()._isRecentOperation('loadChats', LOAD_CHATS_THROTTLE)) {\r\n            console.log('‚ö†Ô∏è Sincroniza√ß√£o de chats muito recente, pulando...');\r\n            return;\r\n          }\r\n\r\n          const { chats: existingChats } = get();\r\n          \r\n          // Mesclar chats do servidor com chats existentes, preservando mensagens\r\n          const mergedChats = serverChats.map(serverChat => {\r\n            const existingChat = existingChats.find(chat => chat.id === serverChat.id);\r\n            \r\n            if (existingChat) {\r\n              // Preservar mensagens existentes e atualizar outras propriedades\r\n              return {\r\n                ...serverChat,\r\n                messages: existingChat.messages || [], // PRESERVAR mensagens existentes\r\n                lastMessage: existingChat.lastMessage || serverChat.lastMessage,\r\n                unreadCount: serverChat.unreadCount || existingChat.unreadCount || 0\r\n              };\r\n            } else {\r\n              // Novo chat, usar dados do servidor\r\n              return {\r\n                ...serverChat,\r\n                messages: [], // Inicializar sem mensagens\r\n                lastMessage: serverChat.lastMessage,\r\n                unreadCount: serverChat.unreadCount || 0\r\n              };\r\n            }\r\n          });\r\n          \r\n          set({ chats: mergedChats });\r\n          set(state => ({ _lastSyncTime: Date.now() }));\r\n          console.log(`‚úÖ ${mergedChats.length} chats carregados do servidor (mensagens preservadas)`);\r\n        },\r\n\r\n        loadMessagesForChat: (chatId: string, messages: WhatsAppMessage[]) => {\r\n          const { chats } = get();\r\n          const updatedChats = chats.map(chat => {\r\n            if (chat.id === chatId) {\r\n              // Preservar mensagens existentes e adicionar novas\r\n              const existingMessages = chat.messages || [];\r\n              const newMessages = messages || [];\r\n              \r\n              // Calcular data limite (3 dias atr√°s)\r\n              const retentionDate = new Date();\r\n              retentionDate.setDate(retentionDate.getDate() - HISTORY_RETENTION_DAYS);\r\n              \r\n              // Filtrar mensagens existentes para manter apenas as dos √∫ltimos 3 dias\r\n              const recentExistingMessages = existingMessages.filter(msg => \r\n                msg.timestamp.getTime() >= retentionDate.getTime()\r\n              );\r\n              \r\n              // Combinar mensagens existentes com novas, evitando duplicatas\r\n              const combinedMessages = [...recentExistingMessages];\r\n              \r\n              // Adicionar apenas mensagens que n√£o existem\r\n              newMessages.forEach(newMsg => {\r\n                const exists = combinedMessages.some(existingMsg => \r\n                  existingMsg.id === newMsg.id || \r\n                  (existingMsg.content === newMsg.content && \r\n                   Math.abs(existingMsg.timestamp.getTime() - newMsg.timestamp.getTime()) < MESSAGE_DUPLICATE_THRESHOLD)\r\n                );\r\n                if (!exists) {\r\n                  combinedMessages.push(newMsg);\r\n                }\r\n              });\r\n              \r\n              // Ordenar por timestamp (mais antiga primeiro)\r\n              const sortedMessages = combinedMessages.sort((a, b) => \r\n                a.timestamp.getTime() - b.timestamp.getTime()\r\n              );\r\n              \r\n              // Log detalhado para debug\r\n              console.log(`üìä Chat ${chatId}:`);\r\n              console.log(`   - Mensagens existentes: ${existingMessages.length}`);\r\n              console.log(`   - Mensagens recentes (${HISTORY_RETENTION_DAYS} dias): ${recentExistingMessages.length}`);\r\n              console.log(`   - Novas mensagens: ${newMessages.length}`);\r\n              console.log(`   - Total ap√≥s combina√ß√£o: ${sortedMessages.length}`);\r\n              \r\n              return { \r\n                ...chat, \r\n                messages: sortedMessages,\r\n                lastMessage: sortedMessages.length > 0 ? sortedMessages[sortedMessages.length - 1] : chat.lastMessage\r\n              };\r\n            }\r\n            return chat;\r\n          });\r\n          \r\n          set({ chats: updatedChats });\r\n          set(state => ({ _lastSyncTime: Date.now() }));\r\n          console.log(`‚úÖ Chat ${chatId} atualizado com ${messages.length} mensagens (total: ${updatedChats.find(c => c.id === chatId)?.messages.length || 0})`);\r\n        },\r\n\r\n        updateConnectionStatus: (status: ConnectionStatus) => {\r\n          set({ connectionStatus: status });\r\n        },\r\n\r\n        setQrCode: (qrCode: string | null) => {\r\n          set({ qrCode });\r\n        }\r\n      };\r\n    },\r\n    {\r\n      name: 'whatsapp-store',\r\n      partialize: (state) => ({\r\n        contacts: state.contacts,\r\n        chats: state.chats,\r\n        campaigns: state.campaigns\r\n      })\r\n    }\r\n  )\r\n); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}