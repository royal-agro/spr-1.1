{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nconst defaultSettings = {\n  theme: 'light',\n  language: 'pt-BR',\n  notifications: {\n    email: false,\n    push: true,\n    whatsapp: true\n  },\n  privacy: {\n    shareAnalytics: true,\n    shareUsageData: false\n  },\n  features: {\n    autoReply: false,\n    aiAssistant: true,\n    campaignManager: true,\n    analytics: true\n  }\n};\nexport const useAppStore = create()(persist((set, get) => ({\n  // State\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  settings: defaultSettings,\n  currentPage: 'dashboard',\n  // Actions\n  setUser: user => set({\n    user\n  }),\n  setAuthenticated: isAuthenticated => set({\n    isAuthenticated\n  }),\n  setLoading: isLoading => set({\n    isLoading\n  }),\n  setError: error => set({\n    error\n  }),\n  setCurrentPage: currentPage => set({\n    currentPage\n  }),\n  updateSettings: newSettings => set(state => ({\n    settings: {\n      ...state.settings,\n      ...newSettings\n    }\n  })),\n  logout: () => set({\n    user: null,\n    isAuthenticated: false,\n    error: null\n  }),\n  login: user => set({\n    user,\n    isAuthenticated: true,\n    error: null\n  })\n}), {\n  name: 'spr-app-storage',\n  storage: createJSONStorage(() => localStorage),\n  partialize: state => ({\n    user: state.user,\n    isAuthenticated: state.isAuthenticated,\n    settings: state.settings,\n    currentPage: state.currentPage\n  })\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","defaultSettings","theme","language","notifications","email","push","whatsapp","privacy","shareAnalytics","shareUsageData","features","autoReply","aiAssistant","campaignManager","analytics","useAppStore","set","get","user","isAuthenticated","isLoading","error","settings","currentPage","setUser","setAuthenticated","setLoading","setError","setCurrentPage","updateSettings","newSettings","state","logout","login","name","storage","localStorage","partialize"],"sources":["/home/cadu/projeto_SPR/frontend/src/store/useAppStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist, createJSONStorage } from 'zustand/middleware';\r\nimport { AppState, AppSettings, User } from '../types';\r\n\r\ninterface AppStore extends AppState {\r\n  // Navigation\r\n  currentPage: string;\r\n  setCurrentPage: (page: string) => void;\r\n  \r\n  // Actions\r\n  setUser: (user: User | null) => void;\r\n  setAuthenticated: (isAuthenticated: boolean) => void;\r\n  setLoading: (isLoading: boolean) => void;\r\n  setError: (error: string | null) => void;\r\n  updateSettings: (settings: Partial<AppSettings>) => void;\r\n  logout: () => void;\r\n  login: (user: User) => void;\r\n}\r\n\r\nconst defaultSettings: AppSettings = {\r\n  theme: 'light',\r\n  language: 'pt-BR',\r\n  notifications: {\r\n    email: false,\r\n    push: true,\r\n    whatsapp: true,\r\n  },\r\n  privacy: {\r\n    shareAnalytics: true,\r\n    shareUsageData: false,\r\n  },\r\n  features: {\r\n    autoReply: false,\r\n    aiAssistant: true,\r\n    campaignManager: true,\r\n    analytics: true,\r\n  },\r\n};\r\n\r\nexport const useAppStore = create<AppStore>()(\r\n  persist(\r\n    (set, get) => ({\r\n      // State\r\n      user: null,\r\n      isAuthenticated: false,\r\n      isLoading: false,\r\n      error: null,\r\n      settings: defaultSettings,\r\n      currentPage: 'dashboard',\r\n\r\n      // Actions\r\n      setUser: (user) => set({ user }),\r\n      \r\n      setAuthenticated: (isAuthenticated) => set({ isAuthenticated }),\r\n      \r\n      setLoading: (isLoading) => set({ isLoading }),\r\n      \r\n      setError: (error) => set({ error }),\r\n      \r\n      setCurrentPage: (currentPage) => set({ currentPage }),\r\n      \r\n      updateSettings: (newSettings) => \r\n        set((state) => ({\r\n          settings: { ...state.settings, ...newSettings }\r\n        })),\r\n      \r\n      logout: () => set({\r\n        user: null,\r\n        isAuthenticated: false,\r\n        error: null,\r\n      }),\r\n      \r\n      login: (user) => set({\r\n        user,\r\n        isAuthenticated: true,\r\n        error: null,\r\n      }),\r\n    }),\r\n    {\r\n      name: 'spr-app-storage',\r\n      storage: createJSONStorage(() => localStorage),\r\n      partialize: (state) => ({\r\n        user: state.user,\r\n        isAuthenticated: state.isAuthenticated,\r\n        settings: state.settings,\r\n        currentPage: state.currentPage,\r\n      }),\r\n    }\r\n  )\r\n); "],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,oBAAoB;AAkB/D,MAAMC,eAA4B,GAAG;EACnCC,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE,OAAO;EACjBC,aAAa,EAAE;IACbC,KAAK,EAAE,KAAK;IACZC,IAAI,EAAE,IAAI;IACVC,QAAQ,EAAE;EACZ,CAAC;EACDC,OAAO,EAAE;IACPC,cAAc,EAAE,IAAI;IACpBC,cAAc,EAAE;EAClB,CAAC;EACDC,QAAQ,EAAE;IACRC,SAAS,EAAE,KAAK;IAChBC,WAAW,EAAE,IAAI;IACjBC,eAAe,EAAE,IAAI;IACrBC,SAAS,EAAE;EACb;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGlB,MAAM,CAAW,CAAC,CAC3CC,OAAO,CACL,CAACkB,GAAG,EAAEC,GAAG,MAAM;EACb;EACAC,IAAI,EAAE,IAAI;EACVC,eAAe,EAAE,KAAK;EACtBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAEtB,eAAe;EACzBuB,WAAW,EAAE,WAAW;EAExB;EACAC,OAAO,EAAGN,IAAI,IAAKF,GAAG,CAAC;IAAEE;EAAK,CAAC,CAAC;EAEhCO,gBAAgB,EAAGN,eAAe,IAAKH,GAAG,CAAC;IAAEG;EAAgB,CAAC,CAAC;EAE/DO,UAAU,EAAGN,SAAS,IAAKJ,GAAG,CAAC;IAAEI;EAAU,CAAC,CAAC;EAE7CO,QAAQ,EAAGN,KAAK,IAAKL,GAAG,CAAC;IAAEK;EAAM,CAAC,CAAC;EAEnCO,cAAc,EAAGL,WAAW,IAAKP,GAAG,CAAC;IAAEO;EAAY,CAAC,CAAC;EAErDM,cAAc,EAAGC,WAAW,IAC1Bd,GAAG,CAAEe,KAAK,KAAM;IACdT,QAAQ,EAAE;MAAE,GAAGS,KAAK,CAACT,QAAQ;MAAE,GAAGQ;IAAY;EAChD,CAAC,CAAC,CAAC;EAELE,MAAM,EAAEA,CAAA,KAAMhB,GAAG,CAAC;IAChBE,IAAI,EAAE,IAAI;IACVC,eAAe,EAAE,KAAK;IACtBE,KAAK,EAAE;EACT,CAAC,CAAC;EAEFY,KAAK,EAAGf,IAAI,IAAKF,GAAG,CAAC;IACnBE,IAAI;IACJC,eAAe,EAAE,IAAI;IACrBE,KAAK,EAAE;EACT,CAAC;AACH,CAAC,CAAC,EACF;EACEa,IAAI,EAAE,iBAAiB;EACvBC,OAAO,EAAEpC,iBAAiB,CAAC,MAAMqC,YAAY,CAAC;EAC9CC,UAAU,EAAGN,KAAK,KAAM;IACtBb,IAAI,EAAEa,KAAK,CAACb,IAAI;IAChBC,eAAe,EAAEY,KAAK,CAACZ,eAAe;IACtCG,QAAQ,EAAES,KAAK,CAACT,QAAQ;IACxBC,WAAW,EAAEQ,KAAK,CAACR;EACrB,CAAC;AACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}