{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n// Configuração do Google Calendar API\nconst GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID || '';\nconst GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY || '';\nconst DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest';\nconst SCOPES = 'https://www.googleapis.com/auth/calendar';\nexport const useGoogleCalendar = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [events, setEvents] = useState([]);\n  const [error, setError] = useState(null);\n\n  // Verificar se o usuário já está autenticado\n  useEffect(() => {\n    const checkAuthStatus = () => {\n      const token = localStorage.getItem('google_calendar_token');\n      if (token) {\n        setIsAuthenticated(true);\n        syncEvents();\n      }\n    };\n    checkAuthStatus();\n  }, []);\n\n  // Função para autenticar com Google\n  const authenticate = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Simulação de autenticação OAuth2\n      // Em produção, você usaria a biblioteca oficial do Google\n      const authUrl = `https://accounts.google.com/oauth/authorize?client_id=${GOOGLE_CLIENT_ID}&redirect_uri=${encodeURIComponent(window.location.origin)}&scope=${encodeURIComponent(SCOPES)}&response_type=code&access_type=offline`;\n\n      // Para demonstração, vamos simular uma autenticação bem-sucedida\n      const mockToken = 'mock_google_calendar_token_' + Date.now();\n      localStorage.setItem('google_calendar_token', mockToken);\n      setIsAuthenticated(true);\n      await syncEvents();\n    } catch (err) {\n      setError('Erro ao autenticar com Google Calendar');\n      console.error('Google Calendar auth error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para desconectar\n  const disconnect = () => {\n    localStorage.removeItem('google_calendar_token');\n    setIsAuthenticated(false);\n    setEvents([]);\n    setError(null);\n  };\n\n  // Função para sincronizar eventos\n  const syncEvents = async () => {\n    if (!isAuthenticated) return;\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Simulação de busca de eventos do Google Calendar\n      // Em produção, você faria uma chamada real para a API\n      const mockEvents = [{\n        id: 'google_1',\n        title: 'Reunião de Análise de Mercado - Google Calendar',\n        description: 'Análise semanal das tendências do mercado de commodities',\n        start: new Date('2025-07-15T09:00:00'),\n        end: new Date('2025-07-15T10:00:00'),\n        location: 'Sala de Reuniões Virtual',\n        attendees: ['equipe@royalnegociosagricolas.com.br']\n      }, {\n        id: 'google_2',\n        title: 'Webinar: Perspectivas Soja 2025 - Google Calendar',\n        description: 'Apresentação das projeções para a safra de soja 2025',\n        start: new Date('2025-07-18T14:00:00'),\n        end: new Date('2025-07-18T15:30:00'),\n        location: 'Online - Google Meet',\n        attendees: ['clientes@royalnegociosagricolas.com.br']\n      }, {\n        id: 'google_3',\n        title: 'Análise Técnica - Milho - Google Calendar',\n        description: 'Análise técnica dos gráficos de milho e projeções',\n        start: new Date('2025-07-20T10:00:00'),\n        end: new Date('2025-07-20T11:00:00'),\n        location: 'Escritório Principal',\n        attendees: ['analistas@royalnegociosagricolas.com.br']\n      }];\n\n      // Simular delay de rede\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setEvents(mockEvents);\n    } catch (err) {\n      setError('Erro ao sincronizar eventos do Google Calendar');\n      console.error('Google Calendar sync error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para criar evento\n  const createEvent = async eventData => {\n    if (!isAuthenticated) {\n      throw new Error('Não autenticado com Google Calendar');\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Simulação de criação de evento\n      const newEvent = {\n        ...eventData,\n        id: 'google_' + Date.now()\n      };\n\n      // Simular delay de rede\n      await new Promise(resolve => setTimeout(resolve, 500));\n      setEvents(prev => [...prev, newEvent]);\n    } catch (err) {\n      setError('Erro ao criar evento no Google Calendar');\n      console.error('Google Calendar create event error:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    isAuthenticated,\n    isLoading,\n    events,\n    error,\n    authenticate,\n    disconnect,\n    syncEvents,\n    createEvent\n  };\n};\n_s(useGoogleCalendar, \"O+sPeGX9UFg+VK4PG7UDO26iNd4=\");","map":{"version":3,"names":["useState","useEffect","GOOGLE_CLIENT_ID","process","env","REACT_APP_GOOGLE_CLIENT_ID","GOOGLE_API_KEY","REACT_APP_GOOGLE_API_KEY","DISCOVERY_DOC","SCOPES","useGoogleCalendar","_s","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","events","setEvents","error","setError","checkAuthStatus","token","localStorage","getItem","syncEvents","authenticate","authUrl","encodeURIComponent","window","location","origin","mockToken","Date","now","setItem","err","console","disconnect","removeItem","mockEvents","id","title","description","start","end","attendees","Promise","resolve","setTimeout","createEvent","eventData","Error","newEvent","prev"],"sources":["/home/cadu/projeto_SPR/frontend/src/hooks/useGoogleCalendar.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\ninterface GoogleCalendarEvent {\r\n  id: string;\r\n  title: string;\r\n  description?: string;\r\n  start: Date;\r\n  end: Date;\r\n  location?: string;\r\n  attendees?: string[];\r\n}\r\n\r\ninterface GoogleCalendarHook {\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  events: GoogleCalendarEvent[];\r\n  error: string | null;\r\n  authenticate: () => Promise<void>;\r\n  disconnect: () => void;\r\n  syncEvents: () => Promise<void>;\r\n  createEvent: (event: Omit<GoogleCalendarEvent, 'id'>) => Promise<void>;\r\n}\r\n\r\n// Configuração do Google Calendar API\r\nconst GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID || '';\r\nconst GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY || '';\r\nconst DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest';\r\nconst SCOPES = 'https://www.googleapis.com/auth/calendar';\r\n\r\nexport const useGoogleCalendar = (): GoogleCalendarHook => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [events, setEvents] = useState<GoogleCalendarEvent[]>([]);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Verificar se o usuário já está autenticado\r\n  useEffect(() => {\r\n    const checkAuthStatus = () => {\r\n      const token = localStorage.getItem('google_calendar_token');\r\n      if (token) {\r\n        setIsAuthenticated(true);\r\n        syncEvents();\r\n      }\r\n    };\r\n\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  // Função para autenticar com Google\r\n  const authenticate = async (): Promise<void> => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Simulação de autenticação OAuth2\r\n      // Em produção, você usaria a biblioteca oficial do Google\r\n      const authUrl = `https://accounts.google.com/oauth/authorize?client_id=${GOOGLE_CLIENT_ID}&redirect_uri=${encodeURIComponent(window.location.origin)}&scope=${encodeURIComponent(SCOPES)}&response_type=code&access_type=offline`;\r\n      \r\n      // Para demonstração, vamos simular uma autenticação bem-sucedida\r\n      const mockToken = 'mock_google_calendar_token_' + Date.now();\r\n      localStorage.setItem('google_calendar_token', mockToken);\r\n      \r\n      setIsAuthenticated(true);\r\n      await syncEvents();\r\n      \r\n    } catch (err) {\r\n      setError('Erro ao autenticar com Google Calendar');\r\n      console.error('Google Calendar auth error:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Função para desconectar\r\n  const disconnect = (): void => {\r\n    localStorage.removeItem('google_calendar_token');\r\n    setIsAuthenticated(false);\r\n    setEvents([]);\r\n    setError(null);\r\n  };\r\n\r\n  // Função para sincronizar eventos\r\n  const syncEvents = async (): Promise<void> => {\r\n    if (!isAuthenticated) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Simulação de busca de eventos do Google Calendar\r\n      // Em produção, você faria uma chamada real para a API\r\n      const mockEvents: GoogleCalendarEvent[] = [\r\n        {\r\n          id: 'google_1',\r\n          title: 'Reunião de Análise de Mercado - Google Calendar',\r\n          description: 'Análise semanal das tendências do mercado de commodities',\r\n          start: new Date('2025-07-15T09:00:00'),\r\n          end: new Date('2025-07-15T10:00:00'),\r\n          location: 'Sala de Reuniões Virtual',\r\n          attendees: ['equipe@royalnegociosagricolas.com.br']\r\n        },\r\n        {\r\n          id: 'google_2',\r\n          title: 'Webinar: Perspectivas Soja 2025 - Google Calendar',\r\n          description: 'Apresentação das projeções para a safra de soja 2025',\r\n          start: new Date('2025-07-18T14:00:00'),\r\n          end: new Date('2025-07-18T15:30:00'),\r\n          location: 'Online - Google Meet',\r\n          attendees: ['clientes@royalnegociosagricolas.com.br']\r\n        },\r\n        {\r\n          id: 'google_3',\r\n          title: 'Análise Técnica - Milho - Google Calendar',\r\n          description: 'Análise técnica dos gráficos de milho e projeções',\r\n          start: new Date('2025-07-20T10:00:00'),\r\n          end: new Date('2025-07-20T11:00:00'),\r\n          location: 'Escritório Principal',\r\n          attendees: ['analistas@royalnegociosagricolas.com.br']\r\n        }\r\n      ];\r\n\r\n      // Simular delay de rede\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      setEvents(mockEvents);\r\n      \r\n    } catch (err) {\r\n      setError('Erro ao sincronizar eventos do Google Calendar');\r\n      console.error('Google Calendar sync error:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Função para criar evento\r\n  const createEvent = async (eventData: Omit<GoogleCalendarEvent, 'id'>): Promise<void> => {\r\n    if (!isAuthenticated) {\r\n      throw new Error('Não autenticado com Google Calendar');\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Simulação de criação de evento\r\n      const newEvent: GoogleCalendarEvent = {\r\n        ...eventData,\r\n        id: 'google_' + Date.now()\r\n      };\r\n\r\n      // Simular delay de rede\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      setEvents(prev => [...prev, newEvent]);\r\n      \r\n    } catch (err) {\r\n      setError('Erro ao criar evento no Google Calendar');\r\n      console.error('Google Calendar create event error:', err);\r\n      throw err;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    isAuthenticated,\r\n    isLoading,\r\n    events,\r\n    error,\r\n    authenticate,\r\n    disconnect,\r\n    syncEvents,\r\n    createEvent\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}