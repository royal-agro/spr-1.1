# Secure Docker Compose configuration for SPR WhatsApp system
# Implements security best practices and production-ready setup

version: '3.8'

services:
  # Nginx reverse proxy with security
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      - spr-backend
      - whatsapp-server
      - backend-server
    restart: unless-stopped
    networks:
      - spr-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /var/cache/nginx:size=50M
      - /var/run:size=10M
      - /tmp:size=50M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Node.js server with security
  backend-server:
    build: 
      context: .
      dockerfile: Dockerfile.secure
      args:
        NODE_ENV: production
    ports:
      - "127.0.0.1:3002:3002"  # Bind to localhost only
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - API_KEYS=${API_KEYS}
      - ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH}
      - MANAGER_PASSWORD_HASH=${MANAGER_PASSWORD_HASH}
      - OPERATOR_PASSWORD_HASH=${OPERATOR_PASSWORD_HASH}
      - WHATSAPP_WEBHOOK_VERIFY_TOKEN=${WHATSAPP_WEBHOOK_VERIFY_TOKEN}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    volumes:
      - ./logs:/app/logs:rw
      - /app/node_modules  # Anonymous volume for node_modules
    restart: unless-stopped
    networks:
      - spr-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp:size=100M
    user: "1000:1000"  # Run as non-root
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WhatsApp server with security
  whatsapp-server:
    build: 
      context: ./whatsapp_server
      dockerfile: Dockerfile.secure
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DEBUG=false
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - whatsapp_sessions:/app/sessions:rw
      - ./logs:/app/logs:rw
      - whatsapp_media:/app/media:rw
      - whatsapp_qrcodes:/app/qrcodes:rw
    restart: unless-stopped
    networks:
      - spr-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SPR Backend Python with security
  spr-backend:
    build: 
      context: .
      dockerfile: Dockerfile.python.secure
    ports:
      - "127.0.0.1:8000:8000"
    environment:
      - SPR_ENVIRONMENT=production
      - DEBUG=false
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
      - MASTER_KEY_PASSWORD=${MASTER_KEY_PASSWORD}
      - DATABASE_URL=postgresql://spr_user:${DB_PASSWORD}@postgres:5432/spr_db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
      - app_security:/app/security:rw
    restart: unless-stopped
    networks:
      - spr-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL with security
  postgres:
    image: postgres:15-alpine
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    environment:
      - POSTGRES_DB=spr_db
      - POSTGRES_USER=spr_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    restart: unless-stopped
    networks:
      - spr-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spr_user -d spr_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis with security
  redis:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data:rw
    restart: unless-stopped
    networks:
      - spr-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "999:999"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Fail2ban for intrusion prevention
  fail2ban:
    image: crazymax/fail2ban:latest
    volumes:
      - ./logs:/var/log:ro
      - ./fail2ban:/data:rw
    environment:
      - TZ=America/Sao_Paulo
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=1d
    restart: unless-stopped
    networks:
      - spr-network
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
      - NET_RAW

  # Security scanner (for continuous monitoring)
  security-scanner:
    image: aquasec/trivy:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security-reports:/reports:rw
    command: >
      sh -c "
        trivy image --format json --output /reports/scan-$(date +%Y%m%d).json spr_backend:latest &&
        trivy image --format json --output /reports/scan-whatsapp-$(date +%Y%m%d).json whatsapp_server:latest
      "
    restart: "no"
    networks:
      - spr-network

volumes:
  postgres_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /opt/spr/data/postgres
  redis_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /opt/spr/data/redis
  whatsapp_sessions:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /opt/spr/data/whatsapp/sessions
  whatsapp_media:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /opt/spr/data/whatsapp/media
  whatsapp_qrcodes:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /opt/spr/data/whatsapp/qrcodes
  app_security:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /opt/spr/security
  ssl_certs:

networks:
  spr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: spr-bridge